// Generated by Haxe 5.0.0-alpha.1+5e4e368
(function ($global) { "use strict";
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxCoro_$cancellationTesting = function(completion) {
	this._hx_completion = completion;
	this._hx_context = completion._hx_context;
	this._hx_state = 0;
	this._hx_result = null;
	this._hx_error = null;
};
HxCoro_$cancellationTesting.__name__ = "HxCoro_cancellationTesting";
HxCoro_$cancellationTesting.prototype = {
	resume: function(result,error) {
		var _gthis = this;
		this._hx_result = result;
		this._hx_error = error;
		this._hx_context.scheduler.schedule(function() {
			try {
				var result = Main.cancellationTesting(_gthis);
				if(result == coro_Primitive.suspended) {
					return;
				}
				_gthis._hx_completion.resume(result,null);
			} catch( _g ) {
				var _g1 = haxe_Exception.caught(_g);
				_gthis._hx_completion.resume(null,_g1);
			}
		});
	}
};
var HxCoro_$delay = function(completion) {
	this._hx_completion = completion;
	this._hx_context = completion._hx_context;
	this._hx_state = 0;
	this._hx_result = null;
	this._hx_error = null;
};
HxCoro_$delay.__name__ = "HxCoro_delay";
HxCoro_$delay.prototype = {
	resume: function(result,error) {
		var _gthis = this;
		this._hx_result = result;
		this._hx_error = error;
		this._hx_context.scheduler.schedule(function() {
			try {
				var result = Main.delay(0,_gthis);
				if(result == coro_Primitive.suspended) {
					return;
				}
				_gthis._hx_completion.resume(result,null);
			} catch( _g ) {
				var _g1 = haxe_Exception.caught(_g);
				_gthis._hx_completion.resume(null,_g1);
			}
		});
	}
};
var HxOverrides = function() { };
HxOverrides.__name__ = "HxOverrides";
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var Main = function() { };
Main.__name__ = "Main";
Main.delay = function(ms,_hx_completion) {
	var _hx_continuation = ((_hx_completion) instanceof HxCoro_$delay) ? _hx_completion : new HxCoro_$delay(_hx_completion);
	var tmp0;
	if(_hx_continuation._hx_error != null) {
		throw haxe_Exception.thrown(_hx_continuation._hx_error);
	}
	while(true) switch(_hx_continuation._hx_state) {
	case 0:
		_hx_continuation._hx_state = 1;
		var _hx_tmp = coro_Coroutine.suspend(function(cont) {
			var handle = null;
			var registration = null;
			handle = global.setTimeout(function() {
				coro_Registration.unregister(registration);
				cont.resume(null,null);
			},ms);
			registration = cont._hx_context.token.register(function() {
				global.clearInterval(handle);
				cont.resume(null,new haxe_exceptions_CancellationException("delay has been cancelled"));
			});
		},_hx_continuation);
		if(_hx_tmp == coro_Primitive.suspended) {
			return coro_Primitive.suspended;
		}
		_hx_continuation._hx_result = _hx_tmp;
		break;
	case 1:
		tmp0 = _hx_continuation._hx_result;
		_hx_continuation._hx_state = -1;
		return tmp0;
	default:
		throw new haxe_Exception("Invalid state");
	}
};
Main.cancellationTesting = function(_hx_completion) {
	var _hx_continuation = ((_hx_completion) instanceof HxCoro_$cancellationTesting) ? _hx_completion : new HxCoro_$cancellationTesting(_hx_completion);
	if(_hx_continuation._hx_error != null) {
		throw haxe_Exception.thrown(_hx_continuation._hx_error);
	}
	while(true) switch(_hx_continuation._hx_state) {
	case 0:
		console.log("src/Main.hx:98:","starting long delay...");
		_hx_continuation._hx_state = 1;
		var _hx_tmp = Main.delay(10000,_hx_continuation);
		if(_hx_tmp == coro_Primitive.suspended) {
			return coro_Primitive.suspended;
		}
		_hx_continuation._hx_result = _hx_tmp;
		break;
	case 1:
		console.log("src/Main.hx:102:","delay over!");
		_hx_continuation._hx_state = -1;
		return 0;
	default:
		throw new haxe_Exception("Invalid state");
	}
};
Main.main = function() {
	var cont = new NodeContinuation(new coro_schedulers_NodeScheduler());
	new HxCoro_$cancellationTesting(cont).resume(null,null);
	global.setTimeout($bind(cont,cont.cancel),2000);
};
Math.__name__ = "Math";
var NodeContinuation = function(scheduler) {
	this.source = new coro_CancellationTokenSource();
	this._hx_context = new coro_CoroutineContext(scheduler,this.source.token);
};
NodeContinuation.__name__ = "NodeContinuation";
NodeContinuation.prototype = {
	resume: function(result,error) {
		if(error != null) {
			throw haxe_Exception.thrown(error);
		}
		console.log("src/NodeContinuation.js.hx:21:",result == null ? "null" : Std.string(result));
	}
	,cancel: function() {
		this.source.cancel();
	}
};
var Std = function() { };
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var coro_CancellationToken = function(source) {
	this.source = source;
};
coro_CancellationToken.__name__ = "coro.CancellationToken";
coro_CancellationToken.prototype = {
	register: function(func) {
		return this.source.register(func);
	}
};
var coro_Registration = {};
coro_Registration._new = function(func) {
	return func;
};
coro_Registration.unregister = function(this1) {
	this1();
};
var coro_CancellationTokenSource = function() {
	this.token = new coro_CancellationToken(this);
	this.cancelled = false;
	this.registrations = [];
};
coro_CancellationTokenSource.__name__ = "coro.CancellationTokenSource";
coro_CancellationTokenSource.prototype = {
	get_isCancellationRequested: function() {
		return this.cancelled;
	}
	,register: function(func) {
		var _gthis = this;
		if(this.get_isCancellationRequested()) {
			throw new haxe_exceptions_CancellationException("Cancellation token has already been cancelled");
		}
		this.registrations.push(func);
		return coro_Registration._new(function() {
			HxOverrides.remove(_gthis.registrations,func);
		});
	}
	,cancel: function() {
		if(this.get_isCancellationRequested()) {
			throw new haxe_exceptions_CancellationException("Cancellation token has already been cancelled");
		}
		this.cancelled = true;
		var _g = 0;
		var _g1 = this.registrations;
		while(_g < _g1.length) {
			var func = _g1[_g];
			++_g;
			func();
		}
	}
};
var coro_Coroutine = function() { };
coro_Coroutine.__name__ = "coro.Coroutine";
coro_Coroutine.suspend = function(func,_hx_completion) {
	var safe = new coro__$Coroutine_SafeContinuation(_hx_completion);
	func(safe);
	return safe.getOrThrow();
};
var coro__$Coroutine_SafeContinuation = function(completion) {
	this._hx_completion = completion;
	this._hx_context = this._hx_completion._hx_context;
	this._hx_result = null;
	this._hx_error = null;
	this.assigned = false;
};
coro__$Coroutine_SafeContinuation.__name__ = "coro._Coroutine.SafeContinuation";
coro__$Coroutine_SafeContinuation.prototype = {
	resume: function(result,error) {
		var _gthis = this;
		this._hx_context.scheduler.schedule(function() {
			if(_gthis.assigned) {
				_gthis._hx_completion.resume(result,error);
			} else {
				_gthis.assigned = true;
				_gthis._hx_result = result;
				_gthis._hx_error = error;
			}
		});
	}
	,getOrThrow: function() {
		if(this.assigned) {
			if(this._hx_error != null) {
				var tmp = this._hx_error;
				throw haxe_Exception.thrown(tmp);
			}
			var tmp = this._hx_result;
			return tmp;
		}
		this.assigned = true;
		return coro_Primitive.suspended;
	}
};
var coro_CoroutineContext = function(scheduler,token) {
	this.scheduler = scheduler;
	this.token = token;
};
coro_CoroutineContext.__name__ = "coro.CoroutineContext";
var coro_Primitive = function() {
};
coro_Primitive.__name__ = "coro.Primitive";
var coro_schedulers_NodeScheduler = function() {
};
coro_schedulers_NodeScheduler.__name__ = "coro.schedulers.NodeScheduler";
coro_schedulers_NodeScheduler.prototype = {
	schedule: function(func) {
		global.setImmediate(func);
	}
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	toString: function() {
		return this.get_message();
	}
	,get_message: function() {
		return this.message;
	}
	,get_native: function() {
		return this.__nativeException;
	}
});
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
});
var haxe_exceptions_CancellationException = function(message) {
	haxe_Exception.call(this,message);
};
haxe_exceptions_CancellationException.__name__ = "haxe.exceptions.CancellationException";
haxe_exceptions_CancellationException.__super__ = haxe_Exception;
haxe_exceptions_CancellationException.prototype = $extend(haxe_Exception.prototype,{
});
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var js_Boot = function() { };
js_Boot.__name__ = "js.Boot";
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var $_;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
String.__name__ = "String";
Array.__name__ = "Array";
js_Boot.__toStr = ({ }).toString;
coro_Primitive.suspended = new coro_Primitive();
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=main.js.map