// Generated by Haxe 5.0.0-alpha.1+5e4e368
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = "EReg";
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,__class__: EReg
};
var coro_Coroutine = function() { };
coro_Coroutine.__name__ = "coro.Coroutine";
coro_Coroutine.suspend = function(func,_hx_completion) {
	var safe = new coro__$Coroutine_SafeContinuation(_hx_completion);
	func(safe);
	return safe.getOrThrow();
};
var coro_Coroutine0 = function() { };
coro_Coroutine0.__name__ = "coro.Coroutine0";
coro_Coroutine0.__super__ = coro_Coroutine;
coro_Coroutine0.prototype = $extend(coro_Coroutine.prototype,{
	create: null
	,start: null
	,__class__: coro_Coroutine0
});
var coro_IContinuation = function() { };
coro_IContinuation.__name__ = "coro.IContinuation";
coro_IContinuation.__isInterface__ = true;
coro_IContinuation.prototype = {
	_hx_context: null
	,resume: null
	,__class__: coro_IContinuation
};
var HxCoro_$cancellationTesting = function(completion) {
	this._hx_completion = completion;
	this._hx_context = completion == null ? null : completion._hx_context;
	this._hx_state = 0;
	this._hx_result = null;
	this._hx_error = null;
};
HxCoro_$cancellationTesting.__name__ = "HxCoro_cancellationTesting";
HxCoro_$cancellationTesting.__interfaces__ = [coro_IContinuation];
HxCoro_$cancellationTesting.__super__ = coro_Coroutine0;
HxCoro_$cancellationTesting.prototype = $extend(coro_Coroutine0.prototype,{
	_hx_completion: null
	,_hx_context: null
	,_hx_state: null
	,_hx_result: null
	,_hx_error: null
	,resume: function(result,error) {
		var _gthis = this;
		this._hx_result = result;
		this._hx_error = error;
		this._hx_context.scheduler.schedule(function() {
			try {
				var result = Main.cancellationTesting(_gthis);
				if(((result) instanceof coro_Primitive)) {
					return;
				}
				_gthis._hx_completion.resume(result,null);
			} catch( _g ) {
				var _g1 = haxe_Exception.caught(_g);
				_gthis._hx_completion.resume(null,_g1);
			}
		});
	}
	,create: function(completion) {
		return new HxCoro_$cancellationTesting(completion);
	}
	,start: function(completion) {
		return Main.cancellationTesting(completion);
	}
	,__class__: HxCoro_$cancellationTesting
});
var HxCoro_$cooperativeCancellation = function(completion) {
	this._hx_completion = completion;
	this._hx_context = completion == null ? null : completion._hx_context;
	this._hx_state = 0;
	this._hx_result = null;
	this._hx_error = null;
};
HxCoro_$cooperativeCancellation.__name__ = "HxCoro_cooperativeCancellation";
HxCoro_$cooperativeCancellation.__interfaces__ = [coro_IContinuation];
HxCoro_$cooperativeCancellation.__super__ = coro_Coroutine0;
HxCoro_$cooperativeCancellation.prototype = $extend(coro_Coroutine0.prototype,{
	_hx_completion: null
	,_hx_context: null
	,_hx_state: null
	,_hx_result: null
	,_hx_error: null
	,resume: function(result,error) {
		var _gthis = this;
		this._hx_result = result;
		this._hx_error = error;
		this._hx_context.scheduler.schedule(function() {
			try {
				var result = Main.cooperativeCancellation(_gthis);
				if(((result) instanceof coro_Primitive)) {
					return;
				}
				_gthis._hx_completion.resume(result,null);
			} catch( _g ) {
				var _g1 = haxe_Exception.caught(_g);
				_gthis._hx_completion.resume(null,_g1);
			}
		});
	}
	,create: function(completion) {
		return new HxCoro_$cooperativeCancellation(completion);
	}
	,start: function(completion) {
		return Main.cooperativeCancellation(completion);
	}
	,__class__: HxCoro_$cooperativeCancellation
});
var coro_Coroutine1 = function() { };
coro_Coroutine1.__name__ = "coro.Coroutine1";
coro_Coroutine1.__super__ = coro_Coroutine;
coro_Coroutine1.prototype = $extend(coro_Coroutine.prototype,{
	create: null
	,start: null
	,__class__: coro_Coroutine1
});
var HxCoro_$coroParameter = function(arg0,completion) {
	this._hx_completion = completion;
	this._hx_context = completion == null ? null : completion._hx_context;
	this._hx_state = 0;
	this._hx_result = null;
	this._hx_error = null;
	this._hx_arg0 = arg0;
};
HxCoro_$coroParameter.__name__ = "HxCoro_coroParameter";
HxCoro_$coroParameter.__interfaces__ = [coro_IContinuation];
HxCoro_$coroParameter.__super__ = coro_Coroutine1;
HxCoro_$coroParameter.prototype = $extend(coro_Coroutine1.prototype,{
	_hx_completion: null
	,_hx_context: null
	,_hx_state: null
	,_hx_result: null
	,_hx_error: null
	,resume: function(result,error) {
		var _gthis = this;
		this._hx_result = result;
		this._hx_error = error;
		this._hx_context.scheduler.schedule(function() {
			try {
				var result = Main.coroParameter(_gthis._hx_arg0,_gthis);
				if(((result) instanceof coro_Primitive)) {
					return;
				}
				_gthis._hx_completion.resume(result,null);
			} catch( _g ) {
				var _g1 = haxe_Exception.caught(_g);
				_gthis._hx_completion.resume(null,_g1);
			}
		});
	}
	,_hx_arg0: null
	,create: function(arg0,completion) {
		return new HxCoro_$coroParameter(arg0,completion);
	}
	,start: function(arg0,completion) {
		return Main.coroParameter(arg0,completion);
	}
	,__class__: HxCoro_$coroParameter
});
var HxCoro_$delay = function(arg0,completion) {
	this._hx_completion = completion;
	this._hx_context = completion == null ? null : completion._hx_context;
	this._hx_state = 0;
	this._hx_result = null;
	this._hx_error = null;
	this._hx_arg0 = arg0;
};
HxCoro_$delay.__name__ = "HxCoro_delay";
HxCoro_$delay.__interfaces__ = [coro_IContinuation];
HxCoro_$delay.__super__ = coro_Coroutine1;
HxCoro_$delay.prototype = $extend(coro_Coroutine1.prototype,{
	_hx_completion: null
	,_hx_context: null
	,_hx_state: null
	,_hx_result: null
	,_hx_error: null
	,resume: function(result,error) {
		var _gthis = this;
		this._hx_result = result;
		this._hx_error = error;
		this._hx_context.scheduler.schedule(function() {
			try {
				var result = Main.delay(_gthis._hx_arg0,_gthis);
				if(((result) instanceof coro_Primitive)) {
					return;
				}
				_gthis._hx_completion.resume(result,null);
			} catch( _g ) {
				var _g1 = haxe_Exception.caught(_g);
				_gthis._hx_completion.resume(null,_g1);
			}
		});
	}
	,_hx_arg0: null
	,create: function(arg0,completion) {
		return new HxCoro_$delay(arg0,completion);
	}
	,start: function(arg0,completion) {
		return Main.delay(arg0,completion);
	}
	,__class__: HxCoro_$delay
});
var HxCoro_$getNumber = function(completion) {
	this._hx_completion = completion;
	this._hx_context = completion == null ? null : completion._hx_context;
	this._hx_state = 0;
	this._hx_result = null;
	this._hx_error = null;
};
HxCoro_$getNumber.__name__ = "HxCoro_getNumber";
HxCoro_$getNumber.__interfaces__ = [coro_IContinuation];
HxCoro_$getNumber.__super__ = coro_Coroutine0;
HxCoro_$getNumber.prototype = $extend(coro_Coroutine0.prototype,{
	_hx_completion: null
	,_hx_context: null
	,_hx_state: null
	,_hx_result: null
	,_hx_error: null
	,resume: function(result,error) {
		var _gthis = this;
		this._hx_result = result;
		this._hx_error = error;
		this._hx_context.scheduler.schedule(function() {
			try {
				var result = Main.getNumber(_gthis);
				if(((result) instanceof coro_Primitive)) {
					return;
				}
				_gthis._hx_completion.resume(result,null);
			} catch( _g ) {
				var _g1 = haxe_Exception.caught(_g);
				_gthis._hx_completion.resume(null,_g1);
			}
		});
	}
	,create: function(completion) {
		return new HxCoro_$getNumber(completion);
	}
	,start: function(completion) {
		return Main.getNumber(completion);
	}
	,__class__: HxCoro_$getNumber
});
var HxCoro_$someAsync = function(completion) {
	this._hx_completion = completion;
	this._hx_context = completion == null ? null : completion._hx_context;
	this._hx_state = 0;
	this._hx_result = null;
	this._hx_error = null;
};
HxCoro_$someAsync.__name__ = "HxCoro_someAsync";
HxCoro_$someAsync.__interfaces__ = [coro_IContinuation];
HxCoro_$someAsync.__super__ = coro_Coroutine0;
HxCoro_$someAsync.prototype = $extend(coro_Coroutine0.prototype,{
	_hx_completion: null
	,_hx_context: null
	,_hx_state: null
	,_hx_result: null
	,_hx_error: null
	,resume: function(result,error) {
		var _gthis = this;
		this._hx_result = result;
		this._hx_error = error;
		this._hx_context.scheduler.schedule(function() {
			try {
				var result = Main.someAsync(_gthis);
				if(((result) instanceof coro_Primitive)) {
					return;
				}
				_gthis._hx_completion.resume(result,null);
			} catch( _g ) {
				var _g1 = haxe_Exception.caught(_g);
				_gthis._hx_completion.resume(null,_g1);
			}
		});
	}
	,create: function(completion) {
		return new HxCoro_$someAsync(completion);
	}
	,start: function(completion) {
		return Main.someAsync(completion);
	}
	,__class__: HxCoro_$someAsync
});
var HxCoro_$write = function(arg0,completion) {
	this._hx_completion = completion;
	this._hx_context = completion == null ? null : completion._hx_context;
	this._hx_state = 0;
	this._hx_result = null;
	this._hx_error = null;
	this._hx_arg0 = arg0;
};
HxCoro_$write.__name__ = "HxCoro_write";
HxCoro_$write.__interfaces__ = [coro_IContinuation];
HxCoro_$write.__super__ = coro_Coroutine1;
HxCoro_$write.prototype = $extend(coro_Coroutine1.prototype,{
	_hx_completion: null
	,_hx_context: null
	,_hx_state: null
	,_hx_result: null
	,_hx_error: null
	,resume: function(result,error) {
		var _gthis = this;
		this._hx_result = result;
		this._hx_error = error;
		this._hx_context.scheduler.schedule(function() {
			try {
				var result = Main.write(_gthis._hx_arg0,_gthis);
				if(((result) instanceof coro_Primitive)) {
					return;
				}
				_gthis._hx_completion.resume(result,null);
			} catch( _g ) {
				var _g1 = haxe_Exception.caught(_g);
				_gthis._hx_completion.resume(null,_g1);
			}
		});
	}
	,_hx_arg0: null
	,create: function(arg0,completion) {
		return new HxCoro_$write(arg0,completion);
	}
	,start: function(arg0,completion) {
		return Main.write(arg0,completion);
	}
	,__class__: HxCoro_$write
});
var HxOverrides = function() { };
HxOverrides.__name__ = "HxOverrides";
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var Lambda = function() { };
Lambda.__name__ = "Lambda";
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
Lambda.has = function(it,elt) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(x1 == elt) {
			return true;
		}
	}
	return false;
};
var utest_ITest = function() { };
utest_ITest.__name__ = "utest.ITest";
utest_ITest.__isInterface__ = true;
var utest_Test = function() {
};
utest_Test.__name__ = "utest.Test";
utest_Test.__interfaces__ = [utest_ITest];
utest_Test.prototype = {
	__initializeUtest__: function() {
		var init = { tests : [], dependencies : [], accessories : { }};
		return init;
	}
	,__class__: utest_Test
};
var Main = function() {
	utest_Test.call(this);
};
Main.__name__ = "Main";
Main.write = function(string,_hx_completion) {
	var _hx_continuation = ((_hx_completion) instanceof HxCoro_$write) ? _hx_completion : new HxCoro_$write(string,_hx_completion);
	var tmp0;
	if(_hx_continuation._hx_error != null) {
		throw haxe_Exception.thrown(_hx_continuation._hx_error);
	}
	while(true) switch(_hx_continuation._hx_state) {
	case 0:
		_hx_continuation._hx_state = 1;
		var _hx_tmp = coro_Coroutine.suspend(function(cont) {
			process.stdout.write(string + "\n",null,function() {
				cont.resume(0,null);
			});
		},_hx_continuation);
		if(((_hx_tmp) instanceof coro_Primitive)) {
			return coro_Primitive.suspended;
		}
		_hx_continuation._hx_result = _hx_tmp;
		break;
	case 1:
		tmp0 = _hx_continuation._hx_result;
		_hx_continuation._hx_state = -1;
		return tmp0;
	default:
		throw new haxe_Exception("Invalid state");
	}
};
Main.delay = function(ms,_hx_completion) {
	var _hx_continuation = ((_hx_completion) instanceof HxCoro_$delay) ? _hx_completion : new HxCoro_$delay(ms,_hx_completion);
	var tmp0;
	if(_hx_continuation._hx_error != null) {
		throw haxe_Exception.thrown(_hx_continuation._hx_error);
	}
	while(true) switch(_hx_continuation._hx_state) {
	case 0:
		_hx_continuation._hx_state = 1;
		var _hx_tmp = coro_Coroutine.suspend(function(cont) {
			var handle = null;
			var registration = null;
			handle = global.setTimeout(function() {
				coro_Registration.unregister(registration);
				cont.resume(null,null);
			},ms);
			registration = cont._hx_context.token.register(function() {
				global.clearInterval(handle);
				cont.resume(null,new haxe_exceptions_CancellationException("delay has been cancelled"));
			});
		},_hx_continuation);
		if(((_hx_tmp) instanceof coro_Primitive)) {
			return coro_Primitive.suspended;
		}
		_hx_continuation._hx_result = _hx_tmp;
		break;
	case 1:
		tmp0 = _hx_continuation._hx_result;
		_hx_continuation._hx_state = -1;
		return tmp0;
	default:
		throw new haxe_Exception("Invalid state");
	}
};
Main.getNumber = function(_hx_completion) {
	var _hx_continuation = ((_hx_completion) instanceof HxCoro_$getNumber) ? _hx_completion : new HxCoro_$getNumber(_hx_completion);
	var tmp0;
	if(_hx_continuation._hx_error != null) {
		throw haxe_Exception.thrown(_hx_continuation._hx_error);
	}
	while(true) switch(_hx_continuation._hx_state) {
	case 0:
		_hx_continuation._hx_state = 1;
		var _hx_tmp = coro_Coroutine.suspend(function(cont) {
			cont.resume(++Main.nextNumber,null);
		},_hx_continuation);
		if(((_hx_tmp) instanceof coro_Primitive)) {
			return coro_Primitive.suspended;
		}
		_hx_continuation._hx_result = _hx_tmp;
		break;
	case 1:
		tmp0 = _hx_continuation._hx_result;
		_hx_continuation._hx_state = -1;
		return tmp0;
	default:
		throw new haxe_Exception("Invalid state");
	}
};
Main.someAsync = function(_hx_completion) {
	var _hx_continuation = ((_hx_completion) instanceof HxCoro_$someAsync) ? _hx_completion : new HxCoro_$someAsync(_hx_completion);
	var tmp1;
	var tmp4;
	if(_hx_continuation._hx_error != null) {
		throw haxe_Exception.thrown(_hx_continuation._hx_error);
	}
	while(true) switch(_hx_continuation._hx_state) {
	case 0:
		_hx_continuation._hx_state = 1;
		var _hx_tmp = Main.write("hi",_hx_continuation);
		if(((_hx_tmp) instanceof coro_Primitive)) {
			return coro_Primitive.suspended;
		}
		_hx_continuation._hx_result = _hx_tmp;
		break;
	case 1:
		_hx_continuation._hx_state = 2;
		break;
	case 2:
		_hx_continuation._hx_state = 3;
		var _hx_tmp1 = Main.getNumber(_hx_continuation);
		if(((_hx_tmp1) instanceof coro_Primitive)) {
			return coro_Primitive.suspended;
		}
		_hx_continuation._hx_result = _hx_tmp1;
		break;
	case 3:
		tmp1 = _hx_continuation._hx_result;
		if(tmp1 < 10) {
			_hx_continuation._hx_state = 4;
		} else {
			_hx_continuation._hx_state = 9;
		}
		break;
	case 4:
		_hx_continuation._hx_state = 5;
		var _hx_tmp2 = Main.write("wait for it...",_hx_continuation);
		if(((_hx_tmp2) instanceof coro_Primitive)) {
			return coro_Primitive.suspended;
		}
		_hx_continuation._hx_result = _hx_tmp2;
		break;
	case 5:
		_hx_continuation._hx_state = 6;
		var _hx_tmp3 = Main.delay(100,_hx_continuation);
		if(((_hx_tmp3) instanceof coro_Primitive)) {
			return coro_Primitive.suspended;
		}
		_hx_continuation._hx_result = _hx_tmp3;
		break;
	case 6:
		_hx_continuation._hx_state = 7;
		var _hx_tmp4 = Main.getNumber(_hx_continuation);
		if(((_hx_tmp4) instanceof coro_Primitive)) {
			return coro_Primitive.suspended;
		}
		_hx_continuation._hx_result = _hx_tmp4;
		break;
	case 7:
		tmp4 = _hx_continuation._hx_result;
		_hx_continuation._hx_state = 8;
		var _hx_tmp5 = Main.write(Std.string(tmp4),_hx_continuation);
		if(((_hx_tmp5) instanceof coro_Primitive)) {
			return coro_Primitive.suspended;
		}
		_hx_continuation._hx_result = _hx_tmp5;
		break;
	case 8:
		_hx_continuation._hx_state = 2;
		break;
	case 9:
		_hx_continuation._hx_state = -1;
		return 15;
	default:
		throw new haxe_Exception("Invalid state");
	}
};
Main.cancellationTesting = function(_hx_completion) {
	var _hx_continuation = ((_hx_completion) instanceof HxCoro_$cancellationTesting) ? _hx_completion : new HxCoro_$cancellationTesting(_hx_completion);
	if(_hx_continuation._hx_error != null) {
		throw haxe_Exception.thrown(_hx_continuation._hx_error);
	}
	while(true) switch(_hx_continuation._hx_state) {
	case 0:
		_hx_continuation._hx_state = 1;
		var _hx_tmp = Main.write("starting long delay...",_hx_continuation);
		if(((_hx_tmp) instanceof coro_Primitive)) {
			return coro_Primitive.suspended;
		}
		_hx_continuation._hx_result = _hx_tmp;
		break;
	case 1:
		_hx_continuation._hx_state = 2;
		var _hx_tmp1 = Main.delay(10000,_hx_continuation);
		if(((_hx_tmp1) instanceof coro_Primitive)) {
			return coro_Primitive.suspended;
		}
		_hx_continuation._hx_result = _hx_tmp1;
		break;
	case 2:
		_hx_continuation._hx_state = 3;
		var _hx_tmp2 = Main.write("delay over!",_hx_continuation);
		if(((_hx_tmp2) instanceof coro_Primitive)) {
			return coro_Primitive.suspended;
		}
		_hx_continuation._hx_result = _hx_tmp2;
		break;
	case 3:
		_hx_continuation._hx_state = -1;
		return _hx_continuation._hx_result;
	default:
		throw new haxe_Exception("Invalid state");
	}
};
Main.cooperativeCancellation = function(_hx_completion) {
	var _hx_continuation = ((_hx_completion) instanceof HxCoro_$cooperativeCancellation) ? _hx_completion : new HxCoro_$cooperativeCancellation(_hx_completion);
	var tmp0;
	if(_hx_continuation._hx_error != null) {
		throw haxe_Exception.thrown(_hx_continuation._hx_error);
	}
	while(true) switch(_hx_continuation._hx_state) {
	case 0:
		haxe_Log.trace("starting work",{ fileName : "src/Main.js.hx", lineNumber : 76, className : "Main", methodName : "cooperativeCancellation"});
		_hx_continuation._hx_state = 1;
		break;
	case 1:
		if(_hx_continuation._hx_context.token.get_isCancellationRequested() == false) {
			_hx_continuation._hx_state = 2;
		} else {
			_hx_continuation._hx_state = 4;
		}
		break;
	case 2:
		_hx_continuation._hx_state = 3;
		var _hx_tmp = Main.getNumber(_hx_continuation);
		if(((_hx_tmp) instanceof coro_Primitive)) {
			return coro_Primitive.suspended;
		}
		_hx_continuation._hx_result = _hx_tmp;
		break;
	case 3:
		tmp0 = _hx_continuation._hx_result;
		Main.accumulated = tmp0;
		_hx_continuation._hx_state = 1;
		break;
	case 4:
		_hx_continuation._hx_state = -1;
		return Main.accumulated;
	default:
		throw new haxe_Exception("Invalid state");
	}
};
Main.coroParameter = function(c,_hx_completion) {
	var _hx_continuation = ((_hx_completion) instanceof HxCoro_$coroParameter) ? _hx_completion : new HxCoro_$coroParameter(c,_hx_completion);
	var tmp0;
	if(_hx_continuation._hx_error != null) {
		throw haxe_Exception.thrown(_hx_continuation._hx_error);
	}
	while(true) switch(_hx_continuation._hx_state) {
	case 0:
		haxe_Log.trace("before",{ fileName : "src/Main.js.hx", lineNumber : 86, className : "Main", methodName : "coroParameter"});
		_hx_continuation._hx_state = 1;
		var _hx_tmp = c.start(_hx_continuation);
		if(((_hx_tmp) instanceof coro_Primitive)) {
			return coro_Primitive.suspended;
		}
		_hx_continuation._hx_result = _hx_tmp;
		break;
	case 1:
		tmp0 = _hx_continuation._hx_result;
		_hx_continuation._hx_state = -1;
		return tmp0;
	default:
		throw new haxe_Exception("Invalid state");
	}
};
Main.main = function() {
	utest_UTest.run([new Main()]);
};
Main.__super__ = utest_Test;
Main.prototype = $extend(utest_Test.prototype,{
	setup: function() {
		Main.nextNumber = 0;
		Main.accumulated = 0;
	}
	,test_complex_continuation: function(async) {
		var cont = new _$Main_CallbackContinuation(new coro_schedulers_NodeScheduler(),function(result,error) {
			utest_Assert.isNull(error,null,{ fileName : "src/Main.js.hx", lineNumber : 103, className : "Main", methodName : "test_complex_continuation"});
			utest_Assert.equals(result,15,null,{ fileName : "src/Main.js.hx", lineNumber : 104, className : "Main", methodName : "test_complex_continuation"});
			async.done({ fileName : "src/Main.js.hx", lineNumber : 106, className : "Main", methodName : "test_complex_continuation"});
		});
		new HxCoro_$someAsync(cont).resume(null,null);
	}
	,test_cancellation: function(async) {
		var cont = new _$Main_CallbackContinuation(new coro_schedulers_NodeScheduler(),function(result,error) {
			utest_Assert.isNull(result,null,{ fileName : "src/Main.js.hx", lineNumber : 114, className : "Main", methodName : "test_cancellation"});
			utest_Assert.isOfType(error,haxe_exceptions_CancellationException,null,{ fileName : "src/Main.js.hx", lineNumber : 115, className : "Main", methodName : "test_cancellation"});
			async.done({ fileName : "src/Main.js.hx", lineNumber : 117, className : "Main", methodName : "test_cancellation"});
		});
		new HxCoro_$cancellationTesting(cont).resume(null,null);
		global.setTimeout($bind(cont,cont.cancel),100);
	}
	,test_cooperative_cancellation: function(async) {
		var cont = new _$Main_CallbackContinuation(new coro_schedulers_NodeScheduler(),function(result,error) {
			utest_Assert.isNull(error,null,{ fileName : "src/Main.js.hx", lineNumber : 127, className : "Main", methodName : "test_cooperative_cancellation"});
			utest_Assert.isTrue(result > 0,null,{ fileName : "src/Main.js.hx", lineNumber : 128, className : "Main", methodName : "test_cooperative_cancellation"});
			async.done({ fileName : "src/Main.js.hx", lineNumber : 130, className : "Main", methodName : "test_cooperative_cancellation"});
		});
		new HxCoro_$cooperativeCancellation(cont).resume(null,null);
		global.setTimeout($bind(cont,cont.cancel),100);
	}
	,test_coro_param: function(async) {
		var cont = new _$Main_CallbackContinuation(new coro_schedulers_NodeScheduler(),function(result,error) {
			utest_Assert.isNull(error,null,{ fileName : "src/Main.js.hx", lineNumber : 140, className : "Main", methodName : "test_coro_param"});
			utest_Assert.equals(result,1,null,{ fileName : "src/Main.js.hx", lineNumber : 141, className : "Main", methodName : "test_coro_param"});
			async.done({ fileName : "src/Main.js.hx", lineNumber : 143, className : "Main", methodName : "test_coro_param"});
		});
		new HxCoro_$coroParameter(new HxCoro_$getNumber(null),cont).resume(null,null);
	}
	,__initializeUtest__: function() {
		var _gthis = this;
		var init = utest_Test.prototype.__initializeUtest__.call(this);
		init.accessories.setup = function() {
			_gthis.setup();
			return utest_Async.getResolved();
		};
		init.tests.push({ name : "test_coro_param", dependencies : [], execute : function() {
			var async = new utest_Async(250);
			_gthis.test_coro_param(async);
			return async;
		}, ignore : haxe_ds_Option.None});
		init.tests.push({ name : "test_cooperative_cancellation", dependencies : [], execute : function() {
			var async = new utest_Async(250);
			_gthis.test_cooperative_cancellation(async);
			return async;
		}, ignore : haxe_ds_Option.None});
		init.tests.push({ name : "test_complex_continuation", dependencies : [], execute : function() {
			var async = new utest_Async(1000);
			_gthis.test_complex_continuation(async);
			return async;
		}, ignore : haxe_ds_Option.None});
		init.tests.push({ name : "test_cancellation", dependencies : [], execute : function() {
			var async = new utest_Async(250);
			_gthis.test_cancellation(async);
			return async;
		}, ignore : haxe_ds_Option.None});
		return init;
	}
	,__class__: Main
});
var _$Main_NodeContinuation = function(scheduler) {
	this.source = new coro_CancellationTokenSource();
	this._hx_context = new coro_CoroutineContext(scheduler,this.source.token);
};
_$Main_NodeContinuation.__name__ = "_Main.NodeContinuation";
_$Main_NodeContinuation.__interfaces__ = [coro_IContinuation];
_$Main_NodeContinuation.prototype = {
	source: null
	,_hx_context: null
	,resume: function(result,error) {
		if(error != null) {
			throw haxe_Exception.thrown(error);
		}
		haxe_Log.trace(result == null ? "null" : Std.string(result),{ fileName : "src/Main.js.hx", lineNumber : 169, className : "_Main.NodeContinuation", methodName : "resume"});
	}
	,cancel: function() {
		this.source.cancel();
	}
	,__class__: _$Main_NodeContinuation
};
var _$Main_CallbackContinuation = function(scheduler,callback) {
	this.callback = callback;
	this.source = new coro_CancellationTokenSource();
	this._hx_context = new coro_CoroutineContext(scheduler,this.source.token);
};
_$Main_CallbackContinuation.__name__ = "_Main.CallbackContinuation";
_$Main_CallbackContinuation.__interfaces__ = [coro_IContinuation];
_$Main_CallbackContinuation.prototype = {
	source: null
	,callback: null
	,_hx_context: null
	,resume: function(result,error) {
		this.callback(result,error);
	}
	,cancel: function() {
		this.source.cancel();
	}
	,__class__: _$Main_CallbackContinuation
};
Math.__name__ = "Math";
var Reflect = function() { };
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
var Std = function() { };
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = "StringTools";
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.trim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	var s1 = r > 0 ? HxOverrides.substr(s,0,l - r) : s;
	var l = s1.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s1,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s1,r,l - r);
	} else {
		return s1;
	}
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var ValueType = $hxEnums["ValueType"] = { __ename__:"ValueType",__constructs__:null
	,TNull: {_hx_name:"TNull",_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_name:"TInt",_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_name:"TFloat",_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_name:"TBool",_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_name:"TObject",_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_name:"TFunction",_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr,__params__:function(){ return [this.c];}}; },$_._hx_name="TClass",$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr,__params__:function(){ return [this.e];}}; },$_._hx_name="TEnum",$_)
	,TUnknown: {_hx_name:"TUnknown",_hx_index:8,__enum__:"ValueType",toString:$estr}
};
ValueType.__constructs__ = [ValueType.TNull,ValueType.TInt,ValueType.TFloat,ValueType.TBool,ValueType.TObject,ValueType.TFunction,ValueType.TClass,ValueType.TEnum,ValueType.TUnknown];
var Type = function() { };
Type.__name__ = "Type";
Type.getEnum = function(o) {
	if(o == null) {
		return null;
	}
	return $hxEnums[o.__enum__];
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumParameters = function(e) {
	if(e.__params__ != null) {
		return e.__params__();
	} else {
		return [];
	}
};
var coro_CancellationToken = function(source) {
	this.source = source;
};
coro_CancellationToken.__name__ = "coro.CancellationToken";
coro_CancellationToken.prototype = {
	source: null
	,get_isCancellationRequested: function() {
		return this.source.get_isCancellationRequested();
	}
	,register: function(func) {
		return this.source.register(func);
	}
	,__class__: coro_CancellationToken
	,__properties__: {get_isCancellationRequested:"get_isCancellationRequested"}
};
var coro_Registration = {};
coro_Registration._new = function(func) {
	return func;
};
coro_Registration.unregister = function(this1) {
	this1();
};
var coro_CancellationTokenSource = function() {
	this.token = new coro_CancellationToken(this);
	this.cancelled = false;
	this.registrations = [];
};
coro_CancellationTokenSource.__name__ = "coro.CancellationTokenSource";
coro_CancellationTokenSource.prototype = {
	cancelled: null
	,registrations: null
	,token: null
	,get_isCancellationRequested: function() {
		return this.cancelled;
	}
	,register: function(func) {
		var _gthis = this;
		if(this.get_isCancellationRequested()) {
			throw new haxe_exceptions_CancellationException("Cancellation token has already been cancelled");
		}
		this.registrations.push(func);
		return coro_Registration._new(function() {
			HxOverrides.remove(_gthis.registrations,func);
		});
	}
	,cancel: function() {
		if(this.get_isCancellationRequested()) {
			throw new haxe_exceptions_CancellationException("Cancellation token has already been cancelled");
		}
		this.cancelled = true;
		var _g = 0;
		var _g1 = this.registrations;
		while(_g < _g1.length) {
			var func = _g1[_g];
			++_g;
			func();
		}
	}
	,__class__: coro_CancellationTokenSource
	,__properties__: {get_isCancellationRequested:"get_isCancellationRequested"}
};
var coro_Coroutine2 = function() { };
coro_Coroutine2.__name__ = "coro.Coroutine2";
coro_Coroutine2.__super__ = coro_Coroutine;
coro_Coroutine2.prototype = $extend(coro_Coroutine.prototype,{
	create: null
	,start: null
	,__class__: coro_Coroutine2
});
var coro__$Coroutine_SafeContinuation = function(completion) {
	this._hx_completion = completion;
	this._hx_context = this._hx_completion._hx_context;
	this._hx_result = null;
	this._hx_error = null;
	this.assigned = false;
};
coro__$Coroutine_SafeContinuation.__name__ = "coro._Coroutine.SafeContinuation";
coro__$Coroutine_SafeContinuation.__interfaces__ = [coro_IContinuation];
coro__$Coroutine_SafeContinuation.prototype = {
	_hx_completion: null
	,assigned: null
	,_hx_result: null
	,_hx_error: null
	,_hx_context: null
	,resume: function(result,error) {
		var _gthis = this;
		this._hx_context.scheduler.schedule(function() {
			if(_gthis.assigned) {
				_gthis._hx_completion.resume(result,error);
			} else {
				_gthis.assigned = true;
				_gthis._hx_result = result;
				_gthis._hx_error = error;
			}
		});
	}
	,getOrThrow: function() {
		if(this.assigned) {
			if(this._hx_error != null) {
				var tmp = this._hx_error;
				throw haxe_Exception.thrown(tmp);
			}
			var tmp = this._hx_result;
			return tmp;
		}
		this.assigned = true;
		return coro_Primitive.suspended;
	}
	,__class__: coro__$Coroutine_SafeContinuation
};
var coro_CoroutineContext = function(scheduler,token) {
	this.scheduler = scheduler;
	this.token = token;
};
coro_CoroutineContext.__name__ = "coro.CoroutineContext";
coro_CoroutineContext.prototype = {
	scheduler: null
	,token: null
	,__class__: coro_CoroutineContext
};
var coro_CoroutineIntrinsics = function() { };
coro_CoroutineIntrinsics.__name__ = "coro.CoroutineIntrinsics";
var coro_Primitive = function() {
};
coro_Primitive.__name__ = "coro.Primitive";
coro_Primitive.prototype = {
	__class__: coro_Primitive
};
var coro_schedulers_IScheduler = function() { };
coro_schedulers_IScheduler.__name__ = "coro.schedulers.IScheduler";
coro_schedulers_IScheduler.__isInterface__ = true;
coro_schedulers_IScheduler.prototype = {
	schedule: null
	,__class__: coro_schedulers_IScheduler
};
var coro_schedulers_NodeScheduler = function() {
};
coro_schedulers_NodeScheduler.__name__ = "coro.schedulers.NodeScheduler";
coro_schedulers_NodeScheduler.__interfaces__ = [coro_schedulers_IScheduler];
coro_schedulers_NodeScheduler.prototype = {
	schedule: function(func) {
		global.setImmediate(func);
	}
	,__class__: coro_schedulers_NodeScheduler
};
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__:"haxe.StackItem",__constructs__:null
	,CFunction: {_hx_name:"CFunction",_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr,__params__:function(){ return [this.m];}}; },$_._hx_name="Module",$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr,__params__:function(){ return [this.s,this.file,this.line,this.column];}}; },$_._hx_name="FilePos",$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr,__params__:function(){ return [this.classname,this.method];}}; },$_._hx_name="Method",$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr,__params__:function(){ return [this.v];}}; },$_._hx_name="LocalFunction",$_)
};
haxe_StackItem.__constructs__ = [haxe_StackItem.CFunction,haxe_StackItem.Module,haxe_StackItem.FilePos,haxe_StackItem.Method,haxe_StackItem.LocalFunction];
var haxe_CallStack = {};
haxe_CallStack.callStack = function() {
	return haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.callStack());
};
haxe_CallStack.exceptionStack = function(fullStack) {
	if(fullStack == null) {
		fullStack = false;
	}
	var eStack = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.exceptionStack());
	return fullStack ? eStack : haxe_CallStack.subtract(eStack,haxe_CallStack.callStack());
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	var _g1 = stack;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.subtract = function(this1,stack) {
	var startIndex = -1;
	var i = -1;
	while(++i < this1.length) {
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var j = _g++;
			if(haxe_CallStack.equalItems(this1[i],stack[j])) {
				if(startIndex < 0) {
					startIndex = i;
				}
				++i;
				if(i >= this1.length) {
					break;
				}
			} else {
				startIndex = -1;
			}
		}
		if(startIndex >= 0) {
			break;
		}
	}
	if(startIndex >= 0) {
		return this1.slice(0,startIndex);
	} else {
		return this1;
	}
};
haxe_CallStack.equalItems = function(item1,item2) {
	if(item1 == null) {
		if(item2 == null) {
			return true;
		} else {
			return false;
		}
	} else {
		switch(item1._hx_index) {
		case 0:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 0) {
				return true;
			} else {
				return false;
			}
			break;
		case 1:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 1) {
				return item1.m == item2.m;
			} else {
				return false;
			}
			break;
		case 2:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 2) {
				if(item1.file == item2.file && item1.line == item2.line && item1.column == item2.column) {
					return haxe_CallStack.equalItems(item1.s,item2.s);
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 3:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 3) {
				if(item1.classname == item2.classname) {
					return item1.method == item2.method;
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 4:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 4) {
				return item1.v == item2.v;
			} else {
				return false;
			}
			break;
		}
	}
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s._hx_index) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var _gm = s.m;
		b.b = (b.b += "module ") + (_gm == null ? "null" : "" + _gm);
		break;
	case 2:
		var _gs = s.s;
		var _gfile = s.file;
		var _gline = s.line;
		var _gcolumn = s.column;
		if(_gs != null) {
			haxe_CallStack.itemToString(b,_gs);
			b.b += " (";
		}
		b.b = (b.b += _gfile == null ? "null" : "" + _gfile) + " line ";
		b.b += _gline == null ? "null" : "" + _gline;
		if(_gcolumn != null) {
			b.b = (b.b += " column ") + (_gcolumn == null ? "null" : "" + _gcolumn);
		}
		if(_gs != null) {
			b.b += ")";
		}
		break;
	case 3:
		var _gclassname = s.classname;
		var _gmethod = s.method;
		b.b = (b.b += Std.string(_gclassname == null ? "<unknown>" : _gclassname)) + ".";
		b.b += _gmethod == null ? "null" : "" + _gmethod;
		break;
	case 4:
		var _gv = s.v;
		b.b = (b.b += "local function #") + (_gv == null ? "null" : "" + _gv);
		break;
	}
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
haxe_IMap.prototype = {
	get: null
	,keys: null
	,__class__: haxe_IMap
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
	this.__skipStack = 0;
	var old = Error.prepareStackTrace;
	Error.prepareStackTrace = function(e) { return e.stack; }
	if(((native) instanceof Error)) {
		this.stack = native.stack;
	} else {
		var e = null;
		if(Error.captureStackTrace) {
			Error.captureStackTrace(this,haxe_Exception);
			e = this;
		} else {
			e = new Error();
			if(typeof(e.stack) == "undefined") {
				try { throw e; } catch(_) {}
				this.__skipStack++;
			}
		}
		this.stack = e.stack;
	}
	Error.prepareStackTrace = old;
};
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		e.__skipStack++;
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	__skipStack: null
	,__nativeException: null
	,__previousException: null
	,toString: function() {
		return this.get_message();
	}
	,__shiftStack: function() {
		this.__skipStack++;
	}
	,get_message: function() {
		return this.message;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,get_stack: function() {
		var _g = this.__exceptionStack;
		if(_g == null) {
			var value = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.normalize(this.stack),this.__skipStack);
			this.setProperty("__exceptionStack",value);
			return value;
		} else {
			return _g;
		}
	}
	,setProperty: function(name,value) {
		try {
			Object.defineProperty(this,name,{ value : value});
		} catch( _g ) {
			this[name] = value;
		}
	}
	,__class__: haxe_Exception
	,__properties__: {get_native:"get_native",get_stack:"get_stack",get_message:"get_message"}
});
var haxe_Log = function() { };
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_NativeStackTrace = function() { };
haxe_NativeStackTrace.__name__ = "haxe.NativeStackTrace";
haxe_NativeStackTrace.saveStack = function(e) {
	haxe_NativeStackTrace.lastError = e;
};
haxe_NativeStackTrace.callStack = function() {
	var e = new Error("");
	var stack = haxe_NativeStackTrace.tryHaxeStack(e);
	if(typeof(stack) == "undefined") {
		try {
			throw e;
		} catch( _g ) {
		}
		stack = e.stack;
	}
	return haxe_NativeStackTrace.normalize(stack,2);
};
haxe_NativeStackTrace.exceptionStack = function() {
	return haxe_NativeStackTrace.normalize(haxe_NativeStackTrace.tryHaxeStack(haxe_NativeStackTrace.lastError));
};
haxe_NativeStackTrace.toHaxe = function(s,skip) {
	if(skip == null) {
		skip = 0;
	}
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var i = _g++;
			if(skip > i) {
				continue;
			}
			var line = stack[i];
			var matched = line.match(/^    at ([$A-Za-z0-9_. ]+) \(([^)]+):([0-9]+):([0-9]+)\)$/);
			if(matched != null) {
				var path = matched[1].split(".");
				if(path[0] == "$hxClasses") {
					path.shift();
				}
				var meth = path.pop();
				var file = matched[2];
				var line1 = Std.parseInt(matched[3]);
				var column = Std.parseInt(matched[4]);
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else if(skip > 0 && Array.isArray(s)) {
		return s.slice(skip);
	} else {
		return s;
	}
};
haxe_NativeStackTrace.tryHaxeStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = haxe_NativeStackTrace.prepareHxStackTrace;
	var stack = e.stack;
	Error.prepareStackTrace = oldValue;
	return stack;
};
haxe_NativeStackTrace.prepareHxStackTrace = function(e,callsites) {
	var stack = [];
	var _g = 0;
	while(_g < callsites.length) {
		var site = callsites[_g];
		++_g;
		if(haxe_NativeStackTrace.wrapCallSite != null) {
			site = haxe_NativeStackTrace.wrapCallSite(site);
		}
		var method = null;
		var fullName = site.getFunctionName();
		if(fullName != null) {
			var idx = fullName.lastIndexOf(".");
			if(idx >= 0) {
				var className = fullName.substring(0,idx);
				var methodName = fullName.substring(idx + 1);
				method = haxe_StackItem.Method(className,methodName);
			} else {
				method = haxe_StackItem.Method(null,fullName);
			}
		}
		var fileName = site.getFileName();
		var fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
		if(haxe_NativeStackTrace.wrapCallSite != null && fileAddr > 0) {
			fileName = fileName.substring(fileAddr + 6);
		}
		stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
	}
	return stack;
};
haxe_NativeStackTrace.normalize = function(stack,skipItems) {
	if(skipItems == null) {
		skipItems = 0;
	}
	if(Array.isArray(stack) && skipItems > 0) {
		return stack.slice(skipItems);
	} else if(typeof(stack) == "string") {
		switch(stack.substring(0,6)) {
		case "Error\n":case "Error:":
			++skipItems;
			break;
		default:
		}
		return haxe_NativeStackTrace.skipLines(stack,skipItems);
	} else {
		return stack;
	}
};
haxe_NativeStackTrace.skipLines = function(stack,skip,pos) {
	if(pos == null) {
		pos = 0;
	}
	while(true) if(skip > 0) {
		pos = stack.indexOf("\n",pos);
		if(pos < 0) {
			return "";
		} else {
			skip = --skip;
			pos += 1;
			continue;
		}
	} else {
		return stack.substring(pos);
	}
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
	this.__skipStack++;
};
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	value: null
	,__class__: haxe_ValueException
});
var haxe_ds_List = function() {
	this.length = 0;
};
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,iterator: function() {
		return new haxe_ds__$List_ListIterator(this.h);
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: haxe_ds__$List_ListNode
};
var haxe_ds__$List_ListIterator = function(head) {
	this.head = head;
};
haxe_ds__$List_ListIterator.__name__ = "haxe.ds._List.ListIterator";
haxe_ds__$List_ListIterator.prototype = {
	head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: haxe_ds__$List_ListIterator
};
var haxe_ds_Option = $hxEnums["haxe.ds.Option"] = { __ename__:"haxe.ds.Option",__constructs__:null
	,Some: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Option",toString:$estr,__params__:function(){ return [this.v];}}; },$_._hx_name="Some",$_)
	,None: {_hx_name:"None",_hx_index:1,__enum__:"haxe.ds.Option",toString:$estr}
};
haxe_ds_Option.__constructs__ = [haxe_ds_Option.Some,haxe_ds_Option.None];
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,get: function(key) {
		return this.h[key];
	}
	,keys: function() {
		return new haxe_ds__$StringMap_StringMapKeyIterator(this.h);
	}
	,__class__: haxe_ds_StringMap
};
var haxe_ds__$StringMap_StringMapKeyIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
haxe_ds__$StringMap_StringMapKeyIterator.__name__ = "haxe.ds._StringMap.StringMapKeyIterator";
haxe_ds__$StringMap_StringMapKeyIterator.prototype = {
	h: null
	,keys: null
	,length: null
	,current: null
	,hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		return this.keys[this.current++];
	}
	,__class__: haxe_ds__$StringMap_StringMapKeyIterator
};
var haxe_exceptions_CancellationException = function(message) {
	haxe_Exception.call(this,message);
	this.__skipStack++;
};
haxe_exceptions_CancellationException.__name__ = "haxe.exceptions.CancellationException";
haxe_exceptions_CancellationException.__super__ = haxe_Exception;
haxe_exceptions_CancellationException.prototype = $extend(haxe_Exception.prototype,{
	__class__: haxe_exceptions_CancellationException
});
var haxe_exceptions_PosException = function(message,previous,pos) {
	haxe_Exception.call(this,message,previous);
	if(pos == null) {
		this.posInfos = { fileName : "(unknown)", lineNumber : 0, className : "(unknown)", methodName : "(unknown)"};
	} else {
		this.posInfos = pos;
	}
	this.__skipStack++;
};
haxe_exceptions_PosException.__name__ = "haxe.exceptions.PosException";
haxe_exceptions_PosException.__super__ = haxe_Exception;
haxe_exceptions_PosException.prototype = $extend(haxe_Exception.prototype,{
	posInfos: null
	,toString: function() {
		return "" + haxe_Exception.prototype.toString.call(this) + " in " + this.posInfos.className + "." + this.posInfos.methodName + " at " + this.posInfos.fileName + ":" + this.posInfos.lineNumber;
	}
	,__class__: haxe_exceptions_PosException
});
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,__class__: haxe_io_Bytes
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	array: null
	,current: null
	,hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var js_Boot = function() { };
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(o.__params__) {
				s = s + "\t";
				var params = o.__params__();
				var _g = 0;
				var _g1 = params.length;
				while(true) {
					if(!(_g < _g1)) {
						break;
					}
					var i = (function($this) {
						var $r;
						_g = _g + 1;
						$r = _g - 1;
						return $r;
					}(this));
					params[i] = js_Boot.__string_rec(params[i],s);
				}
				return (n == null ? "null" : "" + n) + "(" + params.join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	while(true) {
		if(cc == null) {
			return false;
		}
		if(cc == cl) {
			return true;
		}
		var intf = cc.__interfaces__;
		if(intf != null) {
			var _g = 0;
			var _g1 = intf.length;
			while(_g < _g1) {
				var i = _g++;
				var i1 = intf[i];
				if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
					return true;
				}
			}
		}
		cc = cc.__super__;
	}
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__implements = function(o,iface) {
	return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_node_stream_WritableNewOptionsAdapter = {};
js_node_stream_WritableNewOptionsAdapter.from = function(options) {
	if(!Object.prototype.hasOwnProperty.call(options,"final")) {
		Object.defineProperty(options,"final",{ get : function() {
			return options.final_;
		}});
	}
	return options;
};
var js_node_url_URLSearchParamsEntry = {};
js_node_url_URLSearchParamsEntry.__properties__ = {get_value:"get_value",get_name:"get_name"};
js_node_url_URLSearchParamsEntry._new = function(name,value) {
	return [name,value];
};
js_node_url_URLSearchParamsEntry.get_name = function(this1) {
	return this1[0];
};
js_node_url_URLSearchParamsEntry.get_value = function(this1) {
	return this1[1];
};
var utest_Assert = function() { };
utest_Assert.__name__ = "utest.Assert";
utest_Assert.processResult = function(cond,getMessage,pos) {
	if(utest_Assert.results == null) {
		throw haxe_Exception.thrown("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(cond) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(getMessage(),pos));
	}
	return cond;
};
utest_Assert.isTrue = function(cond,msg,pos) {
	if(utest_Assert.results == null) {
		throw haxe_Exception.thrown("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(cond) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected true",pos));
	}
	return cond;
};
utest_Assert.isFalse = function(value,msg,pos) {
	var cond = value == false;
	if(utest_Assert.results == null) {
		throw haxe_Exception.thrown("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(cond) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected false",pos));
	}
	return cond;
};
utest_Assert.isNull = function(value,msg,pos) {
	var cond = value == null;
	if(utest_Assert.results == null) {
		throw haxe_Exception.thrown("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(cond) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected null but it is " + utest_Assert.q(value),pos));
	}
	return cond;
};
utest_Assert.notNull = function(value,msg,pos) {
	var cond = value != null;
	if(utest_Assert.results == null) {
		throw haxe_Exception.thrown("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(cond) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected not null",pos));
	}
	return cond;
};
utest_Assert.is = function(value,type,msg,pos) {
	return utest_Assert.isOfType(value,type,msg,pos);
};
utest_Assert.isOfType = function(value,type,msg,pos) {
	var cond = js_Boot.__instanceof(value,type);
	if(utest_Assert.results == null) {
		throw haxe_Exception.thrown("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(cond) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected type " + utest_Assert.typeToString(type) + " but it is " + utest_Assert.typeToString(value),pos));
	}
	return cond;
};
utest_Assert.notEquals = function(expected,value,msg,pos) {
	var cond = expected != value;
	if(utest_Assert.results == null) {
		throw haxe_Exception.thrown("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(cond) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected " + utest_Assert.q(expected) + " and test value " + utest_Assert.q(value) + " should be different",pos));
	}
	return cond;
};
utest_Assert.equals = function(expected,value,msg,pos) {
	var cond = expected == value;
	if(utest_Assert.results == null) {
		throw haxe_Exception.thrown("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(cond) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value),pos));
	}
	return cond;
};
utest_Assert.match = function(pattern,value,msg,pos) {
	var cond = pattern.match(value);
	if(utest_Assert.results == null) {
		throw haxe_Exception.thrown("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(cond) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "the value " + utest_Assert.q(value) + " does not match the provided pattern",pos));
	}
	return cond;
};
utest_Assert.floatEquals = function(expected,value,approx,msg,pos) {
	var cond = utest_Assert._floatEquals(expected,value,approx);
	if(utest_Assert.results == null) {
		throw haxe_Exception.thrown("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
	}
	if(cond) {
		utest_Assert.results.add(utest_Assertation.Success(pos));
	} else {
		utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value),pos));
	}
	return cond;
};
utest_Assert._floatEquals = function(expected,value,approx) {
	if(isNaN(expected)) {
		return isNaN(value);
	} else if(isNaN(value)) {
		return false;
	} else if(!isFinite(expected) && !isFinite(value)) {
		return expected > 0 == value > 0;
	}
	if(null == approx) {
		approx = 1e-5;
	}
	return Math.abs(value - expected) <= approx;
};
utest_Assert.getTypeName = function(v) {
	var _g = Type.typeof(v);
	switch(_g._hx_index) {
	case 0:
		return "`null`";
	case 1:
		return "Int";
	case 2:
		return "Float";
	case 3:
		return "Bool";
	case 4:
		return "Object";
	case 5:
		return "function";
	case 6:
		var c = _g.c;
		return c.__name__;
	case 7:
		var e = _g.e;
		return e.__ename__;
	case 8:
		return "`Unknown`";
	}
};
utest_Assert.isIterable = function(v,isAnonym) {
	var fields = isAnonym ? Reflect.fields(v) : Type.getInstanceFields(js_Boot.getClass(v));
	if(!Lambda.has(fields,"iterator")) {
		return false;
	}
	return Reflect.isFunction(Reflect.field(v,"iterator"));
};
utest_Assert.isIterator = function(v,isAnonym) {
	var fields = isAnonym ? Reflect.fields(v) : Type.getInstanceFields(js_Boot.getClass(v));
	if(!Lambda.has(fields,"next") || !Lambda.has(fields,"hasNext")) {
		return false;
	}
	if(Reflect.isFunction(Reflect.field(v,"next"))) {
		return Reflect.isFunction(Reflect.field(v,"hasNext"));
	} else {
		return false;
	}
};
utest_Assert.checkTypesCompatibility = function(expected,value,allowDifferentObjectTypes) {
	var texpected = utest_Assert.getTypeName(expected);
	var tvalue = utest_Assert.getTypeName(value);
	if(texpected == tvalue) {
		return true;
	}
	if(texpected == "Int" && tvalue == "Float" || texpected == "Float" && tvalue == "Int") {
		return true;
	}
	if(allowDifferentObjectTypes) {
		var valueIsMap = js_Boot.__implements(value,haxe_IMap);
		var valueIsArray = ((value) instanceof Array);
		if(js_Boot.__implements(expected,haxe_IMap) && !valueIsMap) {
			return false;
		}
		if(((expected) instanceof Array) && !valueIsArray) {
			return false;
		}
		if(valueIsArray || valueIsMap) {
			return false;
		}
		var isObject = function(v) {
			var _g = Type.typeof(value);
			switch(_g._hx_index) {
			case 4:
				return true;
			case 6:
				if(_g.c == String) {
					return false;
				} else {
					return true;
				}
				break;
			default:
				return false;
			}
		};
		if(isObject(expected) && isObject(value)) {
			return true;
		}
	}
	return false;
};
utest_Assert.sameAs = function(expected,value,status,approx,allowExtraFields,allowDifferentObjectTypes) {
	var texpected = utest_Assert.getTypeName(expected);
	var tvalue = utest_Assert.getTypeName(value);
	status.expectedValue = expected;
	status.actualValue = value;
	if(!utest_Assert.checkTypesCompatibility(expected,value,allowDifferentObjectTypes)) {
		status.error = "expected type " + texpected + " but it is " + tvalue + (status.path == "" ? "" : " for field " + status.path);
		return false;
	}
	var _g = Type.typeof(expected);
	switch(_g._hx_index) {
	case 1:case 2:
		if(!utest_Assert._floatEquals(expected,value,approx)) {
			status.error = "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value) + (status.path == "" ? "" : " for field " + status.path);
			return false;
		}
		return true;
	case 0:case 3:
		if(expected != value) {
			status.error = "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value) + (status.path == "" ? "" : " for field " + status.path);
			return false;
		}
		return true;
	case 4:
		if(status.recursive || status.path == "") {
			var tfields;
			var _g1 = Type.typeof(value);
			switch(_g1._hx_index) {
			case 4:
				tfields = Reflect.fields(value);
				break;
			case 6:
				var cls = _g1.c;
				tfields = Type.getInstanceFields(cls);
				break;
			default:
				throw new haxe_exceptions_PosException("Unexpected behavior",null,{ fileName : "utest/Assert.hx", lineNumber : 483, className : "utest.Assert", methodName : "sameAs"});
			}
			var fields = Reflect.fields(expected);
			var path = status.path;
			var _g1 = 0;
			while(_g1 < fields.length) {
				var field = fields[_g1];
				++_g1;
				status.path = path == "" ? field : path + "." + field;
				if(!allowExtraFields && tfields.indexOf(field) == -1) {
					status.error = "expected field " + status.path + " does not exist in " + utest_Assert.q(value);
					return false;
				}
				HxOverrides.remove(tfields,field);
				var e = Reflect.field(expected,field);
				if(Reflect.isFunction(e)) {
					continue;
				}
				var v = Reflect.getProperty(value,field);
				if(!utest_Assert.sameAs(e,v,status,approx,allowExtraFields,allowDifferentObjectTypes)) {
					return false;
				}
			}
			if(!allowExtraFields && tfields.length > 0) {
				status.error = "the tested object has extra field(s) (" + tfields.join(", ") + ") not included in the expected ones";
				return false;
			}
		}
		if(utest_Assert.isIterator(expected,true)) {
			if(!utest_Assert.isIterator(value,true)) {
				status.error = "expected Iterable but it is not " + (status.path == "" ? "" : " for field " + status.path);
				return false;
			}
			if(status.recursive || status.path == "") {
				var evalues = Lambda.array({ iterator : function() {
					return expected;
				}});
				var vvalues = Lambda.array({ iterator : function() {
					return value;
				}});
				if(!allowExtraFields && evalues.length != vvalues.length) {
					status.error = "expected " + evalues.length + " values in Iterator but they are " + vvalues.length + (status.path == "" ? "" : " for field " + status.path);
					return false;
				}
				var path = status.path;
				var _g1 = 0;
				var _g2 = evalues.length;
				while(_g1 < _g2) {
					var i = _g1++;
					status.path = path == "" ? "iterator[" + i + "]" : path + "[" + i + "]";
					if(!utest_Assert.sameAs(evalues[i],vvalues[i],status,approx,allowExtraFields,allowDifferentObjectTypes)) {
						status.error = "expected " + utest_Assert.q(status.expectedValue) + " but it is " + utest_Assert.q(status.actualValue) + (status.path == "" ? "" : " for field " + status.path);
						return false;
					}
				}
			}
			return true;
		}
		if(utest_Assert.isIterable(expected,true)) {
			if(!utest_Assert.isIterable(value,true)) {
				status.error = "expected Iterator but it is not " + (status.path == "" ? "" : " for field " + status.path);
				return false;
			}
			if(status.recursive || status.path == "") {
				var evalues = Lambda.array(expected);
				var vvalues = Lambda.array(value);
				if(!allowExtraFields && evalues.length != vvalues.length) {
					status.error = "expected " + evalues.length + " values in Iterable but they are " + vvalues.length + (status.path == "" ? "" : " for field " + status.path);
					return false;
				}
				var path = status.path;
				var _g1 = 0;
				var _g2 = evalues.length;
				while(_g1 < _g2) {
					var i = _g1++;
					status.path = path == "" ? "iterable[" + i + "]" : path + "[" + i + "]";
					if(!utest_Assert.sameAs(evalues[i],vvalues[i],status,approx,allowExtraFields,allowDifferentObjectTypes)) {
						return false;
					}
				}
			}
			return true;
		}
		return true;
	case 5:
		if(expected != value) {
			status.error = "expected same function reference" + (status.path == "" ? "" : " for field " + status.path);
			return false;
		}
		return true;
	case 6:
		if(!allowExtraFields && texpected != tvalue) {
			status.error = "expected instance of " + utest_Assert.q(texpected) + " but it is " + utest_Assert.q(tvalue) + (status.path == "" ? "" : " for field " + status.path);
			return false;
		}
		if(typeof(expected) == "string") {
			if(expected == value) {
				return true;
			} else {
				status.error = "expected string '" + (expected == null ? "null" : Std.string(expected)) + "' but it is '" + (value == null ? "null" : Std.string(value)) + "'";
				return false;
			}
		}
		if(((expected) instanceof Array)) {
			if(status.recursive || status.path == "") {
				var expected1 = expected;
				var value1 = value;
				if(!allowExtraFields && expected1.length != value1.length) {
					status.error = "expected " + expected1.length + " elements but they are " + value1.length + (status.path == "" ? "" : " for field " + status.path);
					return false;
				}
				var path = status.path;
				var _g1 = 0;
				var _g2 = expected1.length;
				while(_g1 < _g2) {
					var i = _g1++;
					status.path = path == "" ? "array[" + i + "]" : path + "[" + i + "]";
					if(!utest_Assert.sameAs(expected1[i],value1[i],status,approx,allowExtraFields,allowDifferentObjectTypes)) {
						status.error = "expected array element at [" + i + "] to have " + utest_Assert.q(status.expectedValue) + " but it is " + utest_Assert.q(status.actualValue) + (status.path == "" ? "" : " for field " + status.path);
						return false;
					}
				}
			}
			return true;
		}
		if(((expected) instanceof Date)) {
			var expected1 = expected;
			var value1 = value;
			if(expected1.getTime() != value1.getTime()) {
				status.error = "expected " + utest_Assert.q(expected1) + " but it is " + utest_Assert.q(value1) + (status.path == "" ? "" : " for field " + status.path);
				return false;
			}
			return true;
		}
		if(((expected) instanceof haxe_io_Bytes)) {
			if(status.recursive || status.path == "") {
				var ebytes = expected;
				var vbytes = value;
				if(ebytes.length != vbytes.length) {
					status.error = "expected " + ebytes.length + " bytes length but it is " + vbytes.length;
					return false;
				}
				var _g1 = 0;
				var _g2 = ebytes.length;
				while(_g1 < _g2) {
					var i = _g1++;
					if(ebytes.b[i] != vbytes.b[i]) {
						status.error = "expected byte #" + i + " to be " + ebytes.b[i] + " but it is " + vbytes.b[i] + (status.path == "" ? "" : " for field " + status.path);
						return false;
					}
				}
			}
			return true;
		}
		if(js_Boot.__implements(expected,haxe_IMap)) {
			if(status.recursive || status.path == "") {
				var map = js_Boot.__cast(expected , haxe_IMap);
				var vmap = js_Boot.__cast(value , haxe_IMap);
				var _g1 = [];
				var k = map.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					_g1.push(k1);
				}
				var keys = _g1;
				var _g1 = [];
				var k = vmap.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					_g1.push(k1);
				}
				var vkeys = _g1;
				if(!allowExtraFields && keys.length != vkeys.length) {
					status.error = "expected " + keys.length + " keys but they are " + vkeys.length + (status.path == "" ? "" : " for field " + status.path);
					return false;
				}
				var path = status.path;
				var _g1 = 0;
				while(_g1 < keys.length) {
					var key = keys[_g1];
					++_g1;
					status.path = path == "" ? "hash[" + (key == null ? "null" : Std.string(key)) + "]" : path + "[" + (key == null ? "null" : Std.string(key)) + "]";
					if(!utest_Assert.sameAs(map.get(key),vmap.get(key),status,approx,allowExtraFields,allowDifferentObjectTypes)) {
						status.error = "expected " + utest_Assert.q(status.expectedValue) + " but it is " + utest_Assert.q(status.actualValue) + (status.path == "" ? "" : " for field " + status.path);
						return false;
					}
				}
			}
			return true;
		}
		if(utest_Assert.isIterator(expected,false)) {
			if(status.recursive || status.path == "") {
				var evalues = Lambda.array({ iterator : function() {
					return expected;
				}});
				var vvalues = Lambda.array({ iterator : function() {
					return value;
				}});
				if(!allowExtraFields && evalues.length != vvalues.length) {
					status.error = "expected " + evalues.length + " values in Iterator but they are " + vvalues.length + (status.path == "" ? "" : " for field " + status.path);
					return false;
				}
				var path = status.path;
				var _g1 = 0;
				var _g2 = evalues.length;
				while(_g1 < _g2) {
					var i = _g1++;
					status.path = path == "" ? "iterator[" + i + "]" : path + "[" + i + "]";
					if(!utest_Assert.sameAs(evalues[i],vvalues[i],status,approx,allowExtraFields,allowDifferentObjectTypes)) {
						status.error = "expected " + utest_Assert.q(status.expectedValue) + " but it is " + utest_Assert.q(status.actualValue) + (status.path == "" ? "" : " for field " + status.path);
						return false;
					}
				}
			}
			return true;
		}
		if(utest_Assert.isIterable(expected,false)) {
			if(status.recursive || status.path == "") {
				var evalues = Lambda.array(expected);
				var vvalues = Lambda.array(value);
				if(!allowExtraFields && evalues.length != vvalues.length) {
					status.error = "expected " + evalues.length + " values in Iterable but they are " + vvalues.length + (status.path == "" ? "" : " for field " + status.path);
					return false;
				}
				var path = status.path;
				var _g1 = 0;
				var _g2 = evalues.length;
				while(_g1 < _g2) {
					var i = _g1++;
					status.path = path == "" ? "iterable[" + i + "]" : path + "[" + i + "]";
					if(!utest_Assert.sameAs(evalues[i],vvalues[i],status,approx,allowExtraFields,allowDifferentObjectTypes)) {
						return false;
					}
				}
			}
			return true;
		}
		if(status.recursive || status.path == "") {
			var fields = Type.getInstanceFields(js_Boot.getClass(expected));
			var path = status.path;
			var _g1 = 0;
			while(_g1 < fields.length) {
				var field = fields[_g1];
				++_g1;
				status.path = path == "" ? field : path + "." + field;
				var e = Reflect.getProperty(expected,field);
				if(Reflect.isFunction(e)) {
					continue;
				}
				var v = Reflect.getProperty(value,field);
				if(!utest_Assert.sameAs(e,v,status,approx,allowExtraFields,allowDifferentObjectTypes)) {
					return false;
				}
			}
		}
		return true;
	case 7:
		var e = _g.e;
		var eexpected = e.__ename__;
		var e = Type.getEnum(value);
		var evalue = e.__ename__;
		if(eexpected != evalue) {
			status.error = "expected enumeration of " + utest_Assert.q(eexpected) + " but it is " + utest_Assert.q(evalue) + (status.path == "" ? "" : " for field " + status.path);
			return false;
		}
		if(status.recursive || status.path == "") {
			if(expected._hx_index != value._hx_index) {
				var e = expected;
				var tmp = "expected enum constructor " + utest_Assert.q($hxEnums[e.__enum__].__constructs__[e._hx_index]._hx_name) + " but it is ";
				var e = value;
				status.error = tmp + utest_Assert.q($hxEnums[e.__enum__].__constructs__[e._hx_index]._hx_name) + (status.path == "" ? "" : " for field " + status.path);
				return false;
			}
			var eparams = Type.enumParameters(expected);
			var vparams = Type.enumParameters(value);
			var path = status.path;
			var _g = 0;
			var _g1 = eparams.length;
			while(_g < _g1) {
				var i = _g++;
				status.path = path == "" ? "enum[" + i + "]" : path + "[" + i + "]";
				if(!utest_Assert.sameAs(eparams[i],vparams[i],status,approx,allowExtraFields,allowDifferentObjectTypes)) {
					status.error = "expected enum param " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value) + (status.path == "" ? "" : " for field " + status.path) + " with " + status.error;
					return false;
				}
			}
		}
		return true;
	case 8:
		throw haxe_Exception.thrown("Unable to compare two unknown types");
	}
};
utest_Assert.q = function(v) {
	if(typeof(v) == "string") {
		return "\"" + StringTools.replace(v,"\"","\\\"") + "\"";
	} else if(v == null) {
		return "null";
	} else {
		return Std.string(v);
	}
};
utest_Assert.same = function(expected,value,recursive,msg,approx,pos) {
	if(null == approx) {
		approx = 1e-5;
	}
	var status = { recursive : null == recursive ? true : recursive, path : "", error : null, expectedValue : expected, actualValue : value};
	if(utest_Assert.sameAs(expected,value,status,approx,false,false)) {
		return utest_Assert.pass(msg,pos);
	} else {
		return utest_Assert.fail(msg == null ? status.error : msg,pos);
	}
};
utest_Assert.similar = function(expected,value,recursive,msg,approx,pos) {
	if(approx == null) {
		approx = 1e-5;
	}
	if(recursive == null) {
		recursive = true;
	}
	var status = { recursive : recursive, path : "", error : null, expectedValue : expected, actualValue : value};
	if(utest_Assert.sameAs(expected,value,status,approx,true,true)) {
		return utest_Assert.pass(msg,pos);
	} else {
		return utest_Assert.fail(msg == null ? status.error : msg,pos);
	}
};
utest_Assert.raises = function(method,type,msgNotThrown,msgWrongType,pos) {
	return utest_Assert._raisesImpl(method,type,function(_) {
		return true;
	},msgNotThrown,msgWrongType,null,pos);
};
utest_Assert.exception = function(method,type,condition,msgNotThrown,msgWrongType,msgWrongCondition,pos) {
	return utest_Assert._raisesImpl(method,type,condition,msgNotThrown,msgWrongType,msgWrongCondition,pos);
};
utest_Assert._raisesImpl = function(method,type,condition,msgNotThrown,msgWrongType,msgWrongCondition,pos) {
	var typeDescr = type != null ? "exception of type " + type.__name__ : "exception";
	try {
		method();
	} catch( _g ) {
		var ex = haxe_Exception.caught(_g);
		var ex1 = ((ex) instanceof haxe_ValueException) ? ex.value : ex;
		if(null == type) {
			if(null == condition) {
				return utest_Assert.pass(null,pos);
			} else {
				if(null == msgWrongCondition) {
					msgWrongCondition = "" + typeDescr + " is raised, but condition failed";
				}
				return utest_Assert.isTrue(condition(ex1),msgWrongCondition,pos);
			}
		} else {
			if(null == msgWrongType) {
				msgWrongType = "expected " + typeDescr + " but it is " + (ex1 == null ? "null" : Std.string(ex1));
			}
			if(utest_Assert.isTrue(js_Boot.__instanceof(ex1,type),msgWrongType,pos)) {
				if(null == condition) {
					return utest_Assert.pass(null,pos);
				} else {
					if(null == msgWrongCondition) {
						msgWrongCondition = "" + typeDescr + " is raised, but condition failed";
					}
					return utest_Assert.isTrue(condition(ex1),msgWrongCondition,pos);
				}
			} else {
				return false;
			}
		}
	}
	if(null == msgNotThrown) {
		msgNotThrown = typeDescr + " not raised";
	}
	return utest_Assert.fail(msgNotThrown,pos);
};
utest_Assert.allows = function(possibilities,value,msg,pos) {
	if(Lambda.has(possibilities,value)) {
		return utest_Assert.isTrue(true,msg,pos);
	} else {
		return utest_Assert.fail(msg == null ? "value " + utest_Assert.q(value) + " not found in the expected possibilities " + Std.string(possibilities) : msg,pos);
	}
};
utest_Assert.contains = function(match,values,msg,pos) {
	return utest_Assert.isTrue(values.indexOf(match) != -1,msg == null ? "values " + utest_Assert.q(values) + " do not contain " + Std.string(match) : msg,pos);
};
utest_Assert.notContains = function(match,values,msg,pos) {
	return utest_Assert.isFalse(values.indexOf(match) != -1,msg == null ? "values " + utest_Assert.q(values) + " do contain " + Std.string(match) : msg,pos);
};
utest_Assert.stringContains = function(match,value,msg,pos) {
	if(value != null && value.indexOf(match) >= 0) {
		return utest_Assert.isTrue(true,msg,pos);
	} else {
		return utest_Assert.fail(msg == null ? "value " + utest_Assert.q(value) + " does not contain " + utest_Assert.q(match) : msg,pos);
	}
};
utest_Assert.stringSequence = function(sequence,value,msg,pos) {
	if(null == value) {
		return utest_Assert.fail(msg == null ? "null argument value" : msg,pos);
	}
	var p = 0;
	var _g = 0;
	while(_g < sequence.length) {
		var s = sequence[_g];
		++_g;
		var p2 = value.indexOf(s,p);
		if(p2 < 0) {
			if(msg == null) {
				msg = "expected '" + s + "' after ";
				if(p > 0) {
					var cut = HxOverrides.substr(value,0,p);
					if(cut.length > 30) {
						cut = "..." + HxOverrides.substr(cut,-27,null);
					}
					msg += " '" + cut + "'";
				} else {
					msg += " begin";
				}
			}
			return utest_Assert.fail(msg,pos);
		}
		p = p2 + s.length;
	}
	return utest_Assert.isTrue(true,msg,pos);
};
utest_Assert.pass = function(msg,pos) {
	if(msg == null) {
		msg = "pass expected";
	}
	return utest_Assert.isTrue(true,msg,pos);
};
utest_Assert.fail = function(msg,pos) {
	if(msg == null) {
		msg = "failure expected";
	}
	return utest_Assert.isTrue(false,msg,pos);
};
utest_Assert.warn = function(msg) {
	utest_Assert.results.add(utest_Assertation.Warning(msg));
};
utest_Assert.createAsync = function(f,timeout) {
	throw new utest_exceptions_UTestException("Assert.createAsync() is not supported since UTest 2.0. Add `async:utest.Async` argument to the test method instead.");
};
utest_Assert.createEvent = function(f,timeout) {
	throw new utest_exceptions_UTestException("Assert.createEvent() is not supported since UTest 2.0. Add `async:utest.Async` argument to the test method instead.");
};
utest_Assert.typeToString = function(t) {
	try {
		var _t = js_Boot.getClass(t);
		if(_t != null) {
			t = _t;
		}
	} catch( _g ) {
	}
	try {
		return t.__name__;
	} catch( _g ) {
	}
	try {
		var _t = Type.getEnum(t);
		if(_t != null) {
			t = _t;
		}
	} catch( _g ) {
	}
	try {
		return t.__ename__;
	} catch( _g ) {
	}
	try {
		return Std.string(Type.typeof(t));
	} catch( _g ) {
	}
	try {
		if(t == null) {
			return "null";
		} else {
			return Std.string(t);
		}
	} catch( _g ) {
	}
	return "<unable to retrieve type name>";
};
var utest_Assertation = $hxEnums["utest.Assertation"] = { __ename__:"utest.Assertation",__constructs__:null
	,Success: ($_=function(pos) { return {_hx_index:0,pos:pos,__enum__:"utest.Assertation",toString:$estr,__params__:function(){ return [this.pos];}}; },$_._hx_name="Success",$_)
	,Failure: ($_=function(msg,pos) { return {_hx_index:1,msg:msg,pos:pos,__enum__:"utest.Assertation",toString:$estr,__params__:function(){ return [this.msg,this.pos];}}; },$_._hx_name="Failure",$_)
	,Error: ($_=function(e,stack) { return {_hx_index:2,e:e,stack:stack,__enum__:"utest.Assertation",toString:$estr,__params__:function(){ return [this.e,this.stack];}}; },$_._hx_name="Error",$_)
	,SetupError: ($_=function(e,stack) { return {_hx_index:3,e:e,stack:stack,__enum__:"utest.Assertation",toString:$estr,__params__:function(){ return [this.e,this.stack];}}; },$_._hx_name="SetupError",$_)
	,TeardownError: ($_=function(e,stack) { return {_hx_index:4,e:e,stack:stack,__enum__:"utest.Assertation",toString:$estr,__params__:function(){ return [this.e,this.stack];}}; },$_._hx_name="TeardownError",$_)
	,TimeoutError: ($_=function(missedAsyncs,stack) { return {_hx_index:5,missedAsyncs:missedAsyncs,stack:stack,__enum__:"utest.Assertation",toString:$estr,__params__:function(){ return [this.missedAsyncs,this.stack];}}; },$_._hx_name="TimeoutError",$_)
	,AsyncError: ($_=function(e,stack) { return {_hx_index:6,e:e,stack:stack,__enum__:"utest.Assertation",toString:$estr,__params__:function(){ return [this.e,this.stack];}}; },$_._hx_name="AsyncError",$_)
	,Warning: ($_=function(msg) { return {_hx_index:7,msg:msg,__enum__:"utest.Assertation",toString:$estr,__params__:function(){ return [this.msg];}}; },$_._hx_name="Warning",$_)
	,Ignore: ($_=function(reason) { return {_hx_index:8,reason:reason,__enum__:"utest.Assertation",toString:$estr,__params__:function(){ return [this.reason];}}; },$_._hx_name="Ignore",$_)
};
utest_Assertation.__constructs__ = [utest_Assertation.Success,utest_Assertation.Failure,utest_Assertation.Error,utest_Assertation.SetupError,utest_Assertation.TeardownError,utest_Assertation.TimeoutError,utest_Assertation.AsyncError,utest_Assertation.Warning,utest_Assertation.Ignore];
var utest_Async = function(timeoutMs) {
	if(timeoutMs == null) {
		timeoutMs = 250;
	}
	this.branches = [];
	this.callbacks = [];
	this.timedOut = false;
	this.resolved = false;
	this.timeoutMs = timeoutMs;
	var hrtime = process.hrtime();
	this.startTime = hrtime[0] + hrtime[1] / 1e9;
	this.timer = haxe_Timer.delay($bind(this,this.setTimedOutState),timeoutMs);
};
utest_Async.__name__ = "utest.Async";
utest_Async.getResolved = function() {
	if(utest_Async.resolvedInstance == null) {
		utest_Async.resolvedInstance = new utest_Async();
		utest_Async.resolvedInstance.done({ fileName : "utest/Async.hx", lineNumber : 26, className : "utest.Async", methodName : "getResolved"});
	}
	return utest_Async.resolvedInstance;
};
utest_Async.strPos = function(pos) {
	return pos.fileName + ":" + pos.lineNumber;
};
utest_Async.prototype = {
	resolved: null
	,timedOut: null
	,callbacks: null
	,timeoutMs: null
	,startTime: null
	,timer: null
	,branches: null
	,done: function(pos) {
		if(this.resolved) {
			if(this.timedOut) {
				throw haxe_Exception.thrown("Cannot done() at " + (pos.fileName + ":" + pos.lineNumber) + " because async is timed out.");
			} else {
				throw haxe_Exception.thrown("Cannot done() at " + (pos.fileName + ":" + pos.lineNumber) + " because async is done already.");
			}
		}
		this.resolved = true;
		this.timer.stop();
		var _g = 0;
		var _g1 = this.callbacks;
		while(_g < _g1.length) {
			var cb = _g1[_g];
			++_g;
			cb();
		}
	}
	,setTimeout: function(timeoutMs,pos) {
		if(this.resolved) {
			throw haxe_Exception.thrown("Cannot setTimeout(" + timeoutMs + ") at " + (pos.fileName + ":" + pos.lineNumber) + " because async is done.");
		}
		if(this.timedOut) {
			throw haxe_Exception.thrown("Cannot setTimeout(" + timeoutMs + ") at " + (pos.fileName + ":" + pos.lineNumber) + " because async is timed out.");
		}
		this.timer.stop();
		this.timeoutMs = timeoutMs;
		var hrtime = process.hrtime();
		var delay = timeoutMs - Math.round(1000 * (hrtime[0] + hrtime[1] / 1e9 - this.startTime));
		this.timer = haxe_Timer.delay($bind(this,this.setTimedOutState),delay);
	}
	,branch: function(fn,pos) {
		var branch = new utest_Async(this.timeoutMs);
		this.branches.push(branch);
		var _g = this;
		var pos1 = pos;
		branch.then(function() {
			_g.checkBranches(pos1);
		});
		if(fn != null) {
			fn(branch);
		}
		return branch;
	}
	,checkBranches: function(pos) {
		var _gthis = this;
		if(this.resolved) {
			return;
		}
		var _g = 0;
		var _g1 = this.branches;
		while(_g < _g1.length) {
			var branch = _g1[_g];
			++_g;
			if(!branch.resolved) {
				return;
			}
			if(branch.timedOut) {
				this.setTimedOutState();
				return;
			}
		}
		var branchCount = this.branches.length;
		haxe_Timer.delay(function() {
			if(branchCount == _gthis.branches.length) {
				_gthis.done(pos);
			}
		},5);
	}
	,then: function(cb) {
		if(this.resolved) {
			cb();
		} else {
			this.callbacks.push(cb);
		}
	}
	,setTimedOutState: function() {
		if(this.resolved) {
			return;
		}
		this.timedOut = true;
		this.done({ fileName : "utest/Async.hx", lineNumber : 115, className : "utest.Async", methodName : "setTimedOutState"});
	}
	,__class__: utest_Async
};
var utest__$Dispatcher_StopPropagationException = function() {
	haxe_Exception.call(this,"");
	this.__skipStack++;
};
utest__$Dispatcher_StopPropagationException.__name__ = "utest._Dispatcher.StopPropagationException";
utest__$Dispatcher_StopPropagationException.__super__ = haxe_Exception;
utest__$Dispatcher_StopPropagationException.prototype = $extend(haxe_Exception.prototype,{
	__class__: utest__$Dispatcher_StopPropagationException
});
var utest_Dispatcher = function() {
	this.handlers = [];
};
utest_Dispatcher.__name__ = "utest.Dispatcher";
utest_Dispatcher.stop = function() {
	throw new utest__$Dispatcher_StopPropagationException();
};
utest_Dispatcher.prototype = {
	handlers: null
	,add: function(h) {
		this.handlers.push(h);
		return h;
	}
	,remove: function(h) {
		var _g = 0;
		var _g1 = this.handlers.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.handlers[i] == h) {
				return this.handlers.splice(i,1)[0];
			}
		}
		return null;
	}
	,clear: function() {
		this.handlers = [];
	}
	,dispatch: function(e) {
		try {
			var list = this.handlers.slice();
			var _g = 0;
			while(_g < list.length) {
				var l = list[_g];
				++_g;
				l(e);
			}
			return true;
		} catch( _g ) {
			if(((haxe_Exception.caught(_g)) instanceof utest__$Dispatcher_StopPropagationException)) {
				return false;
			} else {
				throw _g;
			}
		}
	}
	,has: function() {
		return this.handlers.length > 0;
	}
	,__class__: utest_Dispatcher
};
var utest_Notifier = function() {
	this.handlers = [];
};
utest_Notifier.__name__ = "utest.Notifier";
utest_Notifier.stop = function() {
	throw new utest__$Dispatcher_StopPropagationException();
};
utest_Notifier.prototype = {
	handlers: null
	,add: function(h) {
		this.handlers.push(h);
		return h;
	}
	,remove: function(h) {
		var _g = 0;
		var _g1 = this.handlers.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.handlers[i] == h) {
				return this.handlers.splice(i,1)[0];
			}
		}
		return null;
	}
	,clear: function() {
		this.handlers = [];
	}
	,dispatch: function() {
		try {
			var list = this.handlers.slice();
			var _g = 0;
			while(_g < list.length) {
				var l = list[_g];
				++_g;
				l();
			}
			return true;
		} catch( _g ) {
			if(((haxe_Exception.caught(_g)) instanceof utest__$Dispatcher_StopPropagationException)) {
				return false;
			} else {
				throw _g;
			}
		}
	}
	,has: function() {
		return this.handlers.length > 0;
	}
	,__class__: utest_Notifier
};
var utest_IgnoredFixture = {};
utest_IgnoredFixture.__properties__ = {get_ignoreReason:"get_ignoreReason",get_isIgnored:"get_isIgnored"};
utest_IgnoredFixture.NotIgnored = function() {
	return null;
};
utest_IgnoredFixture.Ignored = function(reason) {
	return reason != null ? reason : "";
};
utest_IgnoredFixture._new = function(reason) {
	return reason;
};
utest_IgnoredFixture.get_isIgnored = function(this1) {
	return this1 != null;
};
utest_IgnoredFixture.get_ignoreReason = function(this1) {
	return this1;
};
var utest_Runner = function() {
	this.executedFixtures = 0;
	this.complete = false;
	this.globalPattern = null;
	this.fixtures = new haxe_ds_StringMap();
	this.onProgress = new utest_Dispatcher();
	this.onStart = new utest_Dispatcher();
	this.onComplete = new utest_Dispatcher();
	this.onPrecheck = new utest_Dispatcher();
	this.onTestStart = new utest_Dispatcher();
	this.onTestComplete = new utest_Dispatcher();
	this.length = 0;
};
utest_Runner.__name__ = "utest.Runner";
utest_Runner.prototype = {
	fixtures: null
	,onProgress: null
	,onStart: null
	,onComplete: null
	,onPrecheck: null
	,onTestStart: null
	,onTestComplete: null
	,length: null
	,globalPattern: null
	,complete: null
	,addCase: function(testCase,pattern) {
		var c = js_Boot.getClass(testCase);
		var className = c.__name__;
		if(Object.prototype.hasOwnProperty.call(this.fixtures.h,className)) {
			throw new utest_exceptions_UTestException("Cannot add the same test twice.");
		}
		var newFixtures = [];
		var init = testCase.__initializeUtest__();
		var _g = 0;
		var _g1 = init.tests;
		while(_g < _g1.length) {
			var test = _g1[_g];
			++_g;
			if(!this.isTestFixtureName(className,test.name,["test","spec"],pattern,this.globalPattern)) {
				continue;
			}
			newFixtures.push(new utest_TestFixture(testCase,test,init.accessories));
		}
		if(newFixtures.length > 0) {
			this.fixtures.h[className] = { caseInstance : testCase, setupClass : utest_utils_AccessoriesUtils.getSetupClass(init.accessories), dependencies : init.dependencies, fixtures : newFixtures, teardownClass : utest_utils_AccessoriesUtils.getTeardownClass(init.accessories)};
			this.length += newFixtures.length;
		}
	}
	,isTestFixtureName: function(caseName,testName,prefixes,pattern,globalPattern) {
		if(pattern == null && globalPattern == null) {
			var _g = 0;
			while(_g < prefixes.length) {
				var prefix = prefixes[_g];
				++_g;
				if(StringTools.startsWith(testName,prefix)) {
					return true;
				}
			}
			return false;
		}
		if(pattern == null) {
			pattern = globalPattern;
		}
		return pattern.match("" + caseName + "." + testName);
	}
	,run: function() {
		this.onStart.dispatch(this);
		var iTestRunner = new utest__$Runner_ITestRunner(this);
		iTestRunner.run();
		this.waitForCompletion();
	}
	,waitForCompletion: function() {
		if(!this.complete) {
			haxe_Timer.delay($bind(this,this.waitForCompletion),100);
		}
	}
	,runFixture: function(fixture) {
		var handler = new utest_TestHandler(fixture);
		handler.onComplete.add($bind(this,this.testComplete));
		handler.onPrecheck.add(($_=this.onPrecheck,$bind($_,$_.dispatch)));
		fixture.get_name();
		this.onTestStart.dispatch(handler);
		handler.execute();
		return handler;
	}
	,executedFixtures: null
	,testComplete: function(h) {
		++this.executedFixtures;
		this.onTestComplete.dispatch(h);
		this.onProgress.dispatch({ result : utest_TestResult.ofHandler(h), done : this.executedFixtures, totals : this.length});
	}
	,__class__: utest_Runner
};
var utest__$Runner_ITestRunner = function(runner) {
	this.failedCases = [];
	this.executedTestsInCurrentCase = [];
	this.failedTestsInCurrentCase = [];
	var _gthis = this;
	this.runner = runner;
	runner.onTestComplete.add(function(handler) {
		var _g_head = handler.results.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var result = val;
			if(result._hx_index != 0) {
				_gthis.failedTestsInCurrentCase.push(handler.fixture.get_name());
				var c = js_Boot.getClass(handler.fixture.target);
				_gthis.failedCases.push(c.__name__);
			}
		}
		_gthis.executedTestsInCurrentCase.push(handler.fixture.get_name());
	});
};
utest__$Runner_ITestRunner.__name__ = "utest._Runner.ITestRunner";
utest__$Runner_ITestRunner.prototype = {
	runner: null
	,cases: null
	,currentCaseName: null
	,currentCase: null
	,currentCaseFixtures: null
	,teardownClass: null
	,setupAsync: null
	,teardownAsync: null
	,failedTestsInCurrentCase: null
	,executedTestsInCurrentCase: null
	,failedCases: null
	,run: function() {
		this.cases = this.orderClassesByDependencies();
		this.runCases();
	}
	,orderClassesByDependencies: function() {
		var _gthis = this;
		var result = [];
		var error = function(testCase,msg) {
			_gthis.runner.onProgress.dispatch({ totals : _gthis.runner.length, result : utest_TestResult.ofFailedSetupClass(testCase,utest_Assertation.SetupError(msg,[])), done : _gthis.runner.executedFixtures});
		};
		var added_h = Object.create(null);
		var addClass = null;
		addClass = function(cls,stack) {
			if(Object.prototype.hasOwnProperty.call(added_h,cls)) {
				return;
			}
			var data = _gthis.runner.fixtures.h[cls];
			if(stack.indexOf(cls) >= 0) {
				error(data.caseInstance,"Circular dependencies among test classes detected: " + stack.join(" -> "));
				return;
			}
			stack.push(cls);
			var dependencies = data.dependencies;
			var _g = 0;
			while(_g < dependencies.length) {
				var dependency = dependencies[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(_gthis.runner.fixtures.h,dependency)) {
					addClass(dependency,stack);
				} else {
					error(data.caseInstance,"This class depends on " + dependency + ", but it cannot be found. Was it added to test runner?");
					return;
				}
			}
			result.push(cls);
			added_h[cls] = true;
		};
		var h = this.runner.fixtures.h;
		var cls_keys = Object.keys(h);
		var cls_length = cls_keys.length;
		var cls_current = 0;
		while(cls_current < cls_length) {
			var cls = cls_keys[cls_current++];
			addClass(cls,[]);
		}
		return new haxe_iterators_ArrayIterator(result);
	}
	,failedDependencies: function(data) {
		var _g = 0;
		var _g1 = data.dependencies;
		while(_g < _g1.length) {
			var dependency = _g1[_g];
			++_g;
			if(this.failedCases.indexOf(dependency) >= 0) {
				return true;
			}
		}
		return false;
	}
	,runCases: function() {
		while(this.cases.hasNext()) {
			this.currentCaseName = this.cases.next();
			var data = this.runner.fixtures.h[this.currentCaseName];
			this.currentCase = data.caseInstance;
			this.failedTestsInCurrentCase = [];
			this.executedTestsInCurrentCase = [];
			if(this.failedDependencies(data)) {
				this.failedCases.push(this.currentCaseName);
				continue;
			}
			this.currentCaseFixtures = data.fixtures;
			this.teardownClass = data.teardownClass;
			try {
				this.setupAsync = data.setupClass();
			} catch( _g ) {
				var _g1 = haxe_Exception.caught(_g);
				this.setupFailed(utest_Assertation.SetupError("setupClass failed: " + _g1.get_message(),_g1.get_stack()));
				return;
			}
			if(this.setupAsync.resolved) {
				if(!this.runFixtures()) {
					return;
				}
			} else {
				this.setupAsync.then($bind(this,this.checkSetup));
				return;
			}
		}
		this.runner.complete = true;
		this.runner.onComplete.dispatch(this.runner);
	}
	,checkSetup: function() {
		if(this.setupAsync.timedOut) {
			this.setupFailed(utest_Assertation.SetupError("setupClass timeout",[]));
		} else if(this.runFixtures()) {
			this.runCases();
		}
	}
	,setupFailed: function(assertation) {
		this.runner.executedFixtures += this.currentCaseFixtures.length;
		this.runner.onProgress.dispatch({ totals : this.runner.length, result : utest_TestResult.ofFailedSetupClass(this.currentCase,assertation), done : this.runner.executedFixtures});
		this.runCases();
	}
	,runFixtures: function(finishedHandler) {
		while(this.currentCaseFixtures.length > 0) {
			var fixture = this.currentCaseFixtures.shift();
			this.checkFixtureDependencies(fixture);
			var handler = this.runner.runFixture(fixture);
			if(!handler.finished) {
				handler.onComplete.add($bind(this,this.runFixtures));
				return false;
			}
		}
		try {
			this.teardownAsync = this.teardownClass();
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g);
			this.teardownFailed(utest_Assertation.TeardownError("teardownClass failed: " + _g1.get_message(),_g1.get_stack()));
			return true;
		}
		if(this.teardownAsync.resolved && finishedHandler == null) {
			return true;
		}
		this.teardownAsync.then($bind(this,this.checkTeardown));
		return false;
	}
	,checkFixtureDependencies: function(fixture) {
		if(fixture.ignoringInfo == null) {
			if(fixture.test.dependencies.length > 0) {
				var failedDeps = [];
				var ignoredDeps = [];
				var _g = 0;
				var _g1 = fixture.test.dependencies;
				while(_g < _g1.length) {
					var dep = _g1[_g];
					++_g;
					if(this.failedTestsInCurrentCase.indexOf(dep) != -1) {
						failedDeps.push(dep);
					}
					if(this.executedTestsInCurrentCase.indexOf(dep) == -1) {
						ignoredDeps.push(dep);
					}
				}
				var failedDepsMsg = failedDeps.length == 0 ? null : utest_IgnoredFixture.Ignored("Failed dependencies: " + failedDeps.join(", "));
				var ignoredDepsMsg = ignoredDeps.length == 0 ? null : utest_IgnoredFixture.Ignored("Skipped dependencies: " + ignoredDeps.join(", "));
				var ignoringInfo = failedDepsMsg == null ? ignoredDepsMsg == null ? utest_IgnoredFixture.NotIgnored() : utest_IgnoredFixture.Ignored(ignoredDepsMsg) : ignoredDepsMsg == null ? utest_IgnoredFixture.Ignored(failedDepsMsg) : utest_IgnoredFixture.Ignored("" + failedDepsMsg + ". " + ignoredDepsMsg);
				fixture.setIgnoringInfo(ignoringInfo);
			}
		}
	}
	,checkTeardown: function() {
		if(this.teardownAsync.timedOut) {
			this.teardownFailed(utest_Assertation.TeardownError("teardownClass timeout",[]));
		}
		this.runCases();
	}
	,teardownFailed: function(assertation) {
		this.runner.onProgress.dispatch({ totals : this.runner.length, result : utest_TestResult.ofFailedTeardownClass(this.currentCase,assertation), done : this.runner.executedFixtures});
	}
	,__class__: utest__$Runner_ITestRunner
};
var utest_AccessoryName = function() { };
utest_AccessoryName.__name__ = "utest.AccessoryName";
var utest_TestFixture = function(target,test,accessories) {
	this.target = target;
	this.test = test;
	this.setupMethod = utest_utils_AccessoriesUtils.getSetup(accessories);
	this.teardownMethod = utest_utils_AccessoriesUtils.getTeardown(accessories);
	var _g = test.ignore;
	var tmp;
	switch(_g._hx_index) {
	case 0:
		tmp = utest_IgnoredFixture.Ignored(_g.v);
		break;
	case 1:
		tmp = utest_IgnoredFixture.NotIgnored();
		break;
	}
	this.ignoringInfo = tmp;
};
utest_TestFixture.__name__ = "utest.TestFixture";
utest_TestFixture.prototype = {
	target: null
	,ignoringInfo: null
	,get_name: function() {
		return this.test.name;
	}
	,test: null
	,setupMethod: null
	,teardownMethod: null
	,setIgnoringInfo: function(info) {
		this.ignoringInfo = info;
	}
	,__class__: utest_TestFixture
	,__properties__: {get_name:"get_name"}
};
var utest_TestHandler = function(fixture) {
	this.wasBound = false;
	this.startTime = 0;
	this.executionTime = 0;
	this.finished = false;
	if(fixture == null) {
		throw haxe_Exception.thrown("fixture argument is null");
	}
	this.fixture = fixture;
	this.results = new haxe_ds_List();
	this.asyncStack = new haxe_ds_List();
	this.onTested = new utest_Dispatcher();
	this.onTimeout = new utest_Dispatcher();
	this.onComplete = new utest_Dispatcher();
	this.onPrecheck = new utest_Dispatcher();
	if(fixture.ignoringInfo != null) {
		this.results.add(utest_Assertation.Ignore(fixture.ignoringInfo));
	}
	this.testCase = fixture.target;
	this.test = fixture.test;
	if(this.test == null) {
		throw haxe_Exception.thrown("Fixture is missing test data");
	}
};
utest_TestHandler.__name__ = "utest.TestHandler";
utest_TestHandler.prototype = {
	results: null
	,fixture: null
	,finished: null
	,executionTime: null
	,asyncStack: null
	,startTime: null
	,onTested: null
	,onTimeout: null
	,onComplete: null
	,onPrecheck: null
	,precheck: null
	,wasBound: null
	,testCase: null
	,test: null
	,setupAsync: null
	,testAsync: null
	,teardownAsync: null
	,execute: function() {
		var hrtime = process.hrtime();
		this.startTime = hrtime[0] + hrtime[1] / 1e9;
		if(this.fixture.ignoringInfo != null) {
			this.executeFinally();
			return;
		}
		this.bindHandler();
		this.runSetup();
	}
	,runSetup: function() {
		try {
			this.setupAsync = this.fixture.setupMethod();
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g);
			if(((_g1) instanceof haxe_ValueException)) {
				var e = _g1;
				var e1 = e.value;
				var stack = e.get_stack();
				this.results.add(utest_Assertation.SetupError(e1,stack));
				this.completedFinally();
				return;
			} else {
				var stack = _g1.get_stack();
				this.results.add(utest_Assertation.SetupError(_g1,stack));
				this.completedFinally();
				return;
			}
		}
		this.setupAsync.then($bind(this,this.checkSetup));
	}
	,checkSetup: function() {
		if(this.setupAsync.timedOut) {
			this.results.add(utest_Assertation.SetupError("Setup timeout",[]));
			this.completedFinally();
		} else {
			this.runTest();
		}
	}
	,runTest: function() {
		try {
			this.testAsync = this.test.execute();
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g);
			if(((_g1) instanceof haxe_ValueException)) {
				var e = _g1;
				var e1 = e.value;
				var stack = e.get_stack();
				this.results.add(utest_Assertation.Error(e1,stack));
				this.runTeardown();
				return;
			} else {
				var stack = _g1.get_stack();
				this.results.add(utest_Assertation.Error(_g1,stack));
				this.runTeardown();
				return;
			}
		}
		this.testAsync.then($bind(this,this.checkTest));
	}
	,checkTest: function() {
		this.onPrecheck.dispatch(this);
		if(this.testAsync.timedOut) {
			this.results.add(utest_Assertation.TimeoutError(1,[]));
			this.onTimeout.dispatch(this);
		} else if(this.testAsync.resolved) {
			if(this.results.length == 0) {
				this.results.add(utest_Assertation.Warning("no assertions"));
			}
			this.onTested.dispatch(this);
		} else {
			throw haxe_Exception.thrown("Unexpected test state");
		}
		this.runTeardown();
	}
	,runTeardown: function() {
		try {
			this.teardownAsync = this.fixture.teardownMethod();
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g);
			if(((_g1) instanceof haxe_ValueException)) {
				var e = _g1;
				var e1 = e.value;
				e.get_stack();
				this.results.add(utest_Assertation.TeardownError(e1,haxe_CallStack.exceptionStack()));
				this.completedFinally();
				return;
			} else {
				_g1.get_stack();
				this.results.add(utest_Assertation.TeardownError(_g1,haxe_CallStack.exceptionStack()));
				this.completedFinally();
				return;
			}
		}
		this.teardownAsync.then($bind(this,this.checkTeardown));
	}
	,checkTeardown: function() {
		if(this.teardownAsync.timedOut) {
			this.results.add(utest_Assertation.TeardownError("Teardown timeout",[]));
		}
		this.completedFinally();
	}
	,executeFinally: function() {
		this.onPrecheck.dispatch(this);
		this.tested();
	}
	,bindHandler: function() {
		if(this.wasBound) {
			return;
		}
		utest_Assert.results = this.results;
		this.wasBound = true;
	}
	,unbindHandler: function() {
		if(!this.wasBound) {
			return;
		}
		utest_Assert.results = null;
		this.wasBound = false;
	}
	,tested: function() {
		if(this.results.length == 0) {
			this.results.add(utest_Assertation.Warning("no assertions"));
		}
		this.onTested.dispatch(this);
		this.completedFinally();
	}
	,timeout: function() {
		this.results.add(utest_Assertation.TimeoutError(this.asyncStack.length,[]));
		this.onTimeout.dispatch(this);
		this.completedFinally();
	}
	,completedFinally: function() {
		this.finished = true;
		this.unbindHandler();
		var hrtime = process.hrtime();
		this.executionTime = (hrtime[0] + hrtime[1] / 1e9 - this.startTime) * 1000;
		this.onComplete.dispatch(this);
	}
	,__class__: utest_TestHandler
};
var utest_TestResult = function() {
};
utest_TestResult.__name__ = "utest.TestResult";
utest_TestResult.ofHandler = function(handler) {
	var r = new utest_TestResult();
	var c = js_Boot.getClass(handler.fixture.target);
	var path = c.__name__.split(".");
	r.cls = path.pop();
	r.pack = path.join(".");
	r.method = handler.fixture.get_name();
	r.assertations = handler.results;
	r.executionTime = handler.executionTime;
	return r;
};
utest_TestResult.ofFailedSetupClass = function(testCase,assertation) {
	var r = new utest_TestResult();
	var c = js_Boot.getClass(testCase);
	var path = c.__name__.split(".");
	r.cls = path.pop();
	r.pack = path.join(".");
	r.method = "setup";
	r.assertations = new haxe_ds_List();
	r.assertations.add(assertation);
	return r;
};
utest_TestResult.ofFailedTeardownClass = function(testCase,assertation) {
	var r = new utest_TestResult();
	var c = js_Boot.getClass(testCase);
	var path = c.__name__.split(".");
	r.cls = path.pop();
	r.pack = path.join(".");
	r.method = "setup";
	r.assertations = new haxe_ds_List();
	r.assertations.add(assertation);
	return r;
};
utest_TestResult.prototype = {
	pack: null
	,cls: null
	,method: null
	,setup: null
	,setupAsync: null
	,teardown: null
	,teardownAsync: null
	,assertations: null
	,executionTime: null
	,allOk: function() {
		var _g_head = this.assertations.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			if(val._hx_index != 0) {
				return false;
			}
		}
		return true;
	}
	,__class__: utest_TestResult
};
var utest_UTest = function() { };
utest_UTest.__name__ = "utest.UTest";
utest_UTest.run = function(cases,callback) {
	var runner = new utest_Runner();
	var _g = 0;
	while(_g < cases.length) {
		var eachCase = cases[_g];
		++_g;
		runner.addCase(eachCase);
	}
	if(null != callback) {
		runner.onComplete.add(function(_) {
			callback();
		});
	}
	utest_ui_Report.create(runner);
	runner.run();
};
var utest_exceptions_UTestException = function(message,previous,native) {
	haxe_Exception.call(this,message,previous,native);
	this.__skipStack++;
};
utest_exceptions_UTestException.__name__ = "utest.exceptions.UTestException";
utest_exceptions_UTestException.__super__ = haxe_Exception;
utest_exceptions_UTestException.prototype = $extend(haxe_Exception.prototype,{
	__class__: utest_exceptions_UTestException
});
var utest_exceptions_AssertFailureException = function(message,previous,native) {
	utest_exceptions_UTestException.call(this,message,previous,native);
	this.__skipStack++;
};
utest_exceptions_AssertFailureException.__name__ = "utest.exceptions.AssertFailureException";
utest_exceptions_AssertFailureException.__super__ = utest_exceptions_UTestException;
utest_exceptions_AssertFailureException.prototype = $extend(utest_exceptions_UTestException.prototype,{
	__class__: utest_exceptions_AssertFailureException
});
var utest_ui_Report = function() { };
utest_ui_Report.__name__ = "utest.ui.Report";
utest_ui_Report.create = function(runner,displaySuccessResults,headerDisplayMode) {
	var report = new utest_ui_text_PrintReport(runner);
	if(null == displaySuccessResults) {
		report.displaySuccessResults = utest_ui_common_SuccessResultsDisplayMode.ShowSuccessResultsWithNoErrors;
	} else {
		report.displaySuccessResults = displaySuccessResults;
	}
	if(null == headerDisplayMode) {
		report.displayHeader = utest_ui_common_HeaderDisplayMode.ShowHeaderWithResults;
	} else {
		report.displayHeader = headerDisplayMode;
	}
	return report;
};
var utest_ui_common_ClassResult = function(className,setupName,teardownName) {
	this.fixtures = new haxe_ds_StringMap();
	this.className = className;
	this.setupName = setupName;
	this.hasSetup = setupName != null;
	this.teardownName = teardownName;
	this.hasTeardown = teardownName != null;
	this.methods = 0;
	this.stats = new utest_ui_common_ResultStats();
};
utest_ui_common_ClassResult.__name__ = "utest.ui.common.ClassResult";
utest_ui_common_ClassResult.prototype = {
	fixtures: null
	,className: null
	,setupName: null
	,teardownName: null
	,hasSetup: null
	,hasTeardown: null
	,methods: null
	,stats: null
	,add: function(result) {
		if(Object.prototype.hasOwnProperty.call(this.fixtures.h,result.methodName)) {
			throw haxe_Exception.thrown("invalid duplicated fixture: " + this.className + "." + result.methodName);
		}
		this.stats.wire(result.stats);
		this.methods++;
		this.fixtures.h[result.methodName] = result;
	}
	,get: function(method) {
		return this.fixtures.h[method];
	}
	,exists: function(method) {
		return Object.prototype.hasOwnProperty.call(this.fixtures.h,method);
	}
	,methodNames: function(errorsHavePriority) {
		if(errorsHavePriority == null) {
			errorsHavePriority = true;
		}
		var names = [];
		var h = this.fixtures.h;
		var name_keys = Object.keys(h);
		var name_length = name_keys.length;
		var name_current = 0;
		while(name_current < name_length) {
			var name = name_keys[name_current++];
			names.push(name);
		}
		if(errorsHavePriority) {
			var me = this;
			names.sort(function(a,b) {
				var as = me.get(a).stats;
				var bs = me.get(b).stats;
				if(as.hasErrors) {
					if(!bs.hasErrors) {
						return -1;
					} else if(as.errors == bs.errors) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.errors,bs.errors);
					}
				} else if(bs.hasErrors) {
					return 1;
				} else if(as.hasFailures) {
					if(!bs.hasFailures) {
						return -1;
					} else if(as.failures == bs.failures) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.failures,bs.failures);
					}
				} else if(bs.hasFailures) {
					return 1;
				} else if(as.hasWarnings) {
					if(!bs.hasWarnings) {
						return -1;
					} else if(as.warnings == bs.warnings) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.warnings,bs.warnings);
					}
				} else if(bs.hasWarnings) {
					return 1;
				} else {
					return Reflect.compare(a,b);
				}
			});
		} else {
			names.sort(function(a,b) {
				return Reflect.compare(a,b);
			});
		}
		return names;
	}
	,__class__: utest_ui_common_ClassResult
};
var utest_ui_common_FixtureResult = function(methodName,executionTime) {
	this.methodName = methodName;
	this.executionTime = executionTime;
	this.list = new haxe_ds_List();
	this.hasTestError = false;
	this.hasSetupError = false;
	this.hasTeardownError = false;
	this.hasTimeoutError = false;
	this.hasAsyncError = false;
	this.stats = new utest_ui_common_ResultStats();
};
utest_ui_common_FixtureResult.__name__ = "utest.ui.common.FixtureResult";
utest_ui_common_FixtureResult.prototype = {
	methodName: null
	,hasTestError: null
	,hasSetupError: null
	,hasTeardownError: null
	,hasTimeoutError: null
	,hasAsyncError: null
	,executionTime: null
	,stats: null
	,list: null
	,iterator: function() {
		return new haxe_ds__$List_ListIterator(this.list.h);
	}
	,add: function(assertation) {
		this.list.add(assertation);
		switch(assertation._hx_index) {
		case 0:
			this.stats.addSuccesses(1);
			break;
		case 1:
			this.stats.addFailures(1);
			break;
		case 2:
			this.stats.addErrors(1);
			break;
		case 3:
			this.stats.addErrors(1);
			this.hasSetupError = true;
			break;
		case 4:
			this.stats.addErrors(1);
			this.hasTeardownError = true;
			break;
		case 5:
			this.stats.addErrors(1);
			this.hasTimeoutError = true;
			break;
		case 6:
			this.stats.addErrors(1);
			this.hasAsyncError = true;
			break;
		case 7:
			this.stats.addWarnings(1);
			break;
		case 8:
			this.stats.addIgnores(1);
			break;
		}
	}
	,__class__: utest_ui_common_FixtureResult
};
var utest_ui_common_HeaderDisplayMode = $hxEnums["utest.ui.common.HeaderDisplayMode"] = { __ename__:"utest.ui.common.HeaderDisplayMode",__constructs__:null
	,AlwaysShowHeader: {_hx_name:"AlwaysShowHeader",_hx_index:0,__enum__:"utest.ui.common.HeaderDisplayMode",toString:$estr}
	,NeverShowHeader: {_hx_name:"NeverShowHeader",_hx_index:1,__enum__:"utest.ui.common.HeaderDisplayMode",toString:$estr}
	,ShowHeaderWithResults: {_hx_name:"ShowHeaderWithResults",_hx_index:2,__enum__:"utest.ui.common.HeaderDisplayMode",toString:$estr}
};
utest_ui_common_HeaderDisplayMode.__constructs__ = [utest_ui_common_HeaderDisplayMode.AlwaysShowHeader,utest_ui_common_HeaderDisplayMode.NeverShowHeader,utest_ui_common_HeaderDisplayMode.ShowHeaderWithResults];
var utest_ui_common_SuccessResultsDisplayMode = $hxEnums["utest.ui.common.SuccessResultsDisplayMode"] = { __ename__:"utest.ui.common.SuccessResultsDisplayMode",__constructs__:null
	,AlwaysShowSuccessResults: {_hx_name:"AlwaysShowSuccessResults",_hx_index:0,__enum__:"utest.ui.common.SuccessResultsDisplayMode",toString:$estr}
	,NeverShowSuccessResults: {_hx_name:"NeverShowSuccessResults",_hx_index:1,__enum__:"utest.ui.common.SuccessResultsDisplayMode",toString:$estr}
	,ShowSuccessResultsWithNoErrors: {_hx_name:"ShowSuccessResultsWithNoErrors",_hx_index:2,__enum__:"utest.ui.common.SuccessResultsDisplayMode",toString:$estr}
};
utest_ui_common_SuccessResultsDisplayMode.__constructs__ = [utest_ui_common_SuccessResultsDisplayMode.AlwaysShowSuccessResults,utest_ui_common_SuccessResultsDisplayMode.NeverShowSuccessResults,utest_ui_common_SuccessResultsDisplayMode.ShowSuccessResultsWithNoErrors];
var utest_ui_common_IReport = function() { };
utest_ui_common_IReport.__name__ = "utest.ui.common.IReport";
utest_ui_common_IReport.__isInterface__ = true;
utest_ui_common_IReport.prototype = {
	displaySuccessResults: null
	,displayHeader: null
	,setHandler: null
	,__class__: utest_ui_common_IReport
};
var utest_ui_common_PackageResult = function(packageName) {
	this.isEmpty = true;
	this.packageName = packageName;
	this.classes = new haxe_ds_StringMap();
	this.packages = new haxe_ds_StringMap();
	this.stats = new utest_ui_common_ResultStats();
};
utest_ui_common_PackageResult.__name__ = "utest.ui.common.PackageResult";
utest_ui_common_PackageResult.prototype = {
	packageName: null
	,isEmpty: null
	,classes: null
	,packages: null
	,stats: null
	,addResult: function(result,flattenPackage) {
		this.isEmpty = false;
		var pack = this.getOrCreatePackage(result.pack,flattenPackage,this);
		var cls = this.getOrCreateClass(pack,result.cls,result.setup,result.teardown);
		var fix = this.createFixture(result.method,result.assertations,result.executionTime);
		cls.add(fix);
	}
	,addClass: function(result) {
		this.isEmpty = false;
		this.classes.h[result.className] = result;
		this.stats.wire(result.stats);
	}
	,addPackage: function(result) {
		this.isEmpty = false;
		this.packages.h[result.packageName] = result;
		this.stats.wire(result.stats);
	}
	,existsPackage: function(name) {
		return Object.prototype.hasOwnProperty.call(this.packages.h,name);
	}
	,existsClass: function(name) {
		return Object.prototype.hasOwnProperty.call(this.classes.h,name);
	}
	,getPackage: function(name) {
		if(this.packageName == null && name == "") {
			return this;
		}
		return this.packages.h[name];
	}
	,getClass: function(name) {
		return this.classes.h[name];
	}
	,classNames: function(errorsHavePriority) {
		if(errorsHavePriority == null) {
			errorsHavePriority = true;
		}
		var names = [];
		var h = this.classes.h;
		var name_keys = Object.keys(h);
		var name_length = name_keys.length;
		var name_current = 0;
		while(name_current < name_length) {
			var name = name_keys[name_current++];
			names.push(name);
		}
		if(errorsHavePriority) {
			var me = this;
			names.sort(function(a,b) {
				var as = me.getClass(a).stats;
				var bs = me.getClass(b).stats;
				if(as.hasErrors) {
					if(!bs.hasErrors) {
						return -1;
					} else if(as.errors == bs.errors) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.errors,bs.errors);
					}
				} else if(bs.hasErrors) {
					return 1;
				} else if(as.hasFailures) {
					if(!bs.hasFailures) {
						return -1;
					} else if(as.failures == bs.failures) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.failures,bs.failures);
					}
				} else if(bs.hasFailures) {
					return 1;
				} else if(as.hasWarnings) {
					if(!bs.hasWarnings) {
						return -1;
					} else if(as.warnings == bs.warnings) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.warnings,bs.warnings);
					}
				} else if(bs.hasWarnings) {
					return 1;
				} else {
					return Reflect.compare(a,b);
				}
			});
		} else {
			names.sort(function(a,b) {
				return Reflect.compare(a,b);
			});
		}
		return names;
	}
	,packageNames: function(errorsHavePriority) {
		if(errorsHavePriority == null) {
			errorsHavePriority = true;
		}
		var names = [];
		if(this.packageName == null) {
			names.push("");
		}
		var h = this.packages.h;
		var name_keys = Object.keys(h);
		var name_length = name_keys.length;
		var name_current = 0;
		while(name_current < name_length) {
			var name = name_keys[name_current++];
			names.push(name);
		}
		if(errorsHavePriority) {
			var me = this;
			names.sort(function(a,b) {
				var as = me.getPackage(a).stats;
				var bs = me.getPackage(b).stats;
				if(as.hasErrors) {
					if(!bs.hasErrors) {
						return -1;
					} else if(as.errors == bs.errors) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.errors,bs.errors);
					}
				} else if(bs.hasErrors) {
					return 1;
				} else if(as.hasFailures) {
					if(!bs.hasFailures) {
						return -1;
					} else if(as.failures == bs.failures) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.failures,bs.failures);
					}
				} else if(bs.hasFailures) {
					return 1;
				} else if(as.hasWarnings) {
					if(!bs.hasWarnings) {
						return -1;
					} else if(as.warnings == bs.warnings) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.warnings,bs.warnings);
					}
				} else if(bs.hasWarnings) {
					return 1;
				} else {
					return Reflect.compare(a,b);
				}
			});
		} else {
			names.sort(function(a,b) {
				return Reflect.compare(a,b);
			});
		}
		return names;
	}
	,createFixture: function(method,assertations,executionTime) {
		var f = new utest_ui_common_FixtureResult(method,executionTime);
		var assertation = $getIterator(assertations);
		while(assertation.hasNext()) {
			var assertation1 = assertation.next();
			f.add(assertation1);
		}
		return f;
	}
	,getOrCreateClass: function(pack,cls,setup,teardown) {
		if(pack.existsClass(cls)) {
			return pack.getClass(cls);
		}
		var c = new utest_ui_common_ClassResult(cls,setup,teardown);
		pack.addClass(c);
		return c;
	}
	,getOrCreatePackage: function(pack,flat,ref) {
		if(pack == null || pack == "") {
			return ref;
		}
		if(flat) {
			if(ref.existsPackage(pack)) {
				return ref.getPackage(pack);
			}
			var p = new utest_ui_common_PackageResult(pack);
			ref.addPackage(p);
			return p;
		} else {
			var parts = pack.split(".");
			var _g = 0;
			while(_g < parts.length) {
				var part = parts[_g];
				++_g;
				ref = this.getOrCreatePackage(part,true,ref);
			}
			return ref;
		}
	}
	,__class__: utest_ui_common_PackageResult
};
var utest_ui_common_ReportTools = function() { };
utest_ui_common_ReportTools.__name__ = "utest.ui.common.ReportTools";
utest_ui_common_ReportTools.hasHeader = function(report,stats) {
	switch(report.displayHeader._hx_index) {
	case 0:
		return true;
	case 1:
		return false;
	case 2:
		if(!stats.isOk) {
			return true;
		}
		switch(report.displaySuccessResults._hx_index) {
		case 1:
			return false;
		case 0:case 2:
			return true;
		}
		break;
	}
};
utest_ui_common_ReportTools.skipResult = function(report,stats,isOk) {
	if(!stats.isOk) {
		return false;
	}
	switch(report.displaySuccessResults._hx_index) {
	case 0:
		return false;
	case 1:
		return true;
	case 2:
		return !isOk;
	}
};
utest_ui_common_ReportTools.hasOutput = function(report,stats) {
	if(!stats.isOk) {
		return true;
	}
	return utest_ui_common_ReportTools.hasHeader(report,stats);
};
var utest_ui_common_ResultAggregator = function(runner,flattenPackage) {
	if(flattenPackage == null) {
		flattenPackage = false;
	}
	if(runner == null) {
		throw haxe_Exception.thrown("runner argument is null");
	}
	this.flattenPackage = flattenPackage;
	this.runner = runner;
	runner.onStart.add($bind(this,this.start));
	runner.onProgress.add($bind(this,this.progress));
	runner.onComplete.add($bind(this,this.complete));
	this.onStart = new utest_Notifier();
	this.onComplete = new utest_Dispatcher();
	this.onProgress = new utest_Dispatcher();
};
utest_ui_common_ResultAggregator.__name__ = "utest.ui.common.ResultAggregator";
utest_ui_common_ResultAggregator.prototype = {
	runner: null
	,flattenPackage: null
	,root: null
	,onStart: null
	,onComplete: null
	,onProgress: null
	,start: function(runner) {
		this.root = new utest_ui_common_PackageResult(null);
		this.onStart.dispatch();
	}
	,getOrCreatePackage: function(pack,flat,ref) {
		if(ref == null) {
			ref = this.root;
		}
		if(pack == null || pack == "") {
			return ref;
		}
		if(flat) {
			if(ref.existsPackage(pack)) {
				return ref.getPackage(pack);
			}
			var p = new utest_ui_common_PackageResult(pack);
			ref.addPackage(p);
			return p;
		} else {
			var parts = pack.split(".");
			var _g = 0;
			while(_g < parts.length) {
				var part = parts[_g];
				++_g;
				ref = this.getOrCreatePackage(part,true,ref);
			}
			return ref;
		}
	}
	,getOrCreateClass: function(pack,cls,setup,teardown) {
		if(pack.existsClass(cls)) {
			return pack.getClass(cls);
		}
		var c = new utest_ui_common_ClassResult(cls,setup,teardown);
		pack.addClass(c);
		return c;
	}
	,createFixture: function(result) {
		var f = new utest_ui_common_FixtureResult(result.method,result.executionTime);
		var _g_head = result.assertations.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			f.add(val);
		}
		return f;
	}
	,progress: function(e) {
		this.root.addResult(e.result,this.flattenPackage);
		this.onProgress.dispatch(e);
	}
	,complete: function(runner) {
		if(this.root.isEmpty) {
			this.root.addResult(this.createNoTestsResult(),false);
		}
		this.onComplete.dispatch(this.root);
	}
	,createNoTestsResult: function() {
		var result = new utest_TestResult();
		result.pack = "";
		result.cls = "";
		result.method = "";
		result.assertations = new haxe_ds_List();
		var pos = { fileName : "", lineNumber : 1, className : "utest.Runner", methodName : "run"};
		result.assertations.add(utest_Assertation.Failure("No tests executed.",pos));
		return result;
	}
	,__class__: utest_ui_common_ResultAggregator
};
var utest_ui_common_ResultStats = function() {
	this.assertations = 0;
	this.successes = 0;
	this.failures = 0;
	this.errors = 0;
	this.warnings = 0;
	this.ignores = 0;
	this.isOk = true;
	this.hasFailures = false;
	this.hasErrors = false;
	this.hasWarnings = false;
	this.hasIgnores = false;
	this.onAddSuccesses = new utest_Dispatcher();
	this.onAddFailures = new utest_Dispatcher();
	this.onAddErrors = new utest_Dispatcher();
	this.onAddWarnings = new utest_Dispatcher();
	this.onAddIgnores = new utest_Dispatcher();
};
utest_ui_common_ResultStats.__name__ = "utest.ui.common.ResultStats";
utest_ui_common_ResultStats.prototype = {
	assertations: null
	,successes: null
	,failures: null
	,errors: null
	,warnings: null
	,ignores: null
	,onAddSuccesses: null
	,onAddFailures: null
	,onAddErrors: null
	,onAddWarnings: null
	,onAddIgnores: null
	,isOk: null
	,hasFailures: null
	,hasErrors: null
	,hasWarnings: null
	,hasIgnores: null
	,addSuccesses: function(v) {
		if(v == 0) {
			return;
		}
		this.assertations += v;
		this.successes += v;
		this.onAddSuccesses.dispatch(v);
	}
	,addFailures: function(v) {
		if(v == 0) {
			return;
		}
		this.assertations += v;
		this.failures += v;
		this.hasFailures = this.failures > 0;
		this.isOk = !(this.hasFailures || this.hasErrors || this.hasWarnings);
		this.onAddFailures.dispatch(v);
	}
	,addErrors: function(v) {
		if(v == 0) {
			return;
		}
		this.assertations += v;
		this.errors += v;
		this.hasErrors = this.errors > 0;
		this.isOk = !(this.hasFailures || this.hasErrors || this.hasWarnings);
		this.onAddErrors.dispatch(v);
	}
	,addIgnores: function(v) {
		if(v == 0) {
			return;
		}
		this.assertations += v;
		this.ignores += v;
		this.hasIgnores = this.ignores > 0;
		this.onAddIgnores.dispatch(v);
	}
	,addWarnings: function(v) {
		if(v == 0) {
			return;
		}
		this.assertations += v;
		this.warnings += v;
		this.hasWarnings = this.warnings > 0;
		this.isOk = !(this.hasFailures || this.hasErrors || this.hasWarnings);
		this.onAddWarnings.dispatch(v);
	}
	,sum: function(other) {
		this.addSuccesses(other.successes);
		this.addFailures(other.failures);
		this.addErrors(other.errors);
		this.addWarnings(other.warnings);
		this.addIgnores(other.ignores);
	}
	,subtract: function(other) {
		this.addSuccesses(-other.successes);
		this.addFailures(-other.failures);
		this.addErrors(-other.errors);
		this.addWarnings(-other.warnings);
		this.addIgnores(-other.ignores);
	}
	,wire: function(dependant) {
		dependant.onAddSuccesses.add($bind(this,this.addSuccesses));
		dependant.onAddFailures.add($bind(this,this.addFailures));
		dependant.onAddErrors.add($bind(this,this.addErrors));
		dependant.onAddWarnings.add($bind(this,this.addWarnings));
		dependant.onAddIgnores.add($bind(this,this.addIgnores));
		this.sum(dependant);
	}
	,unwire: function(dependant) {
		dependant.onAddSuccesses.remove($bind(this,this.addSuccesses));
		dependant.onAddFailures.remove($bind(this,this.addFailures));
		dependant.onAddErrors.remove($bind(this,this.addErrors));
		dependant.onAddWarnings.remove($bind(this,this.addWarnings));
		dependant.onAddIgnores.remove($bind(this,this.addIgnores));
		this.subtract(dependant);
	}
	,__class__: utest_ui_common_ResultStats
};
var utest_ui_text_PlainTextReport = function(runner,outputHandler) {
	this.aggregator = new utest_ui_common_ResultAggregator(runner,true);
	runner.onStart.add($bind(this,this.start));
	this.aggregator.onComplete.add($bind(this,this.complete));
	if(null != outputHandler) {
		this.setHandler(outputHandler);
	}
	this.displaySuccessResults = utest_ui_common_SuccessResultsDisplayMode.AlwaysShowSuccessResults;
	this.displayHeader = utest_ui_common_HeaderDisplayMode.AlwaysShowHeader;
};
utest_ui_text_PlainTextReport.__name__ = "utest.ui.text.PlainTextReport";
utest_ui_text_PlainTextReport.__interfaces__ = [utest_ui_common_IReport];
utest_ui_text_PlainTextReport.prototype = {
	displaySuccessResults: null
	,displayHeader: null
	,handler: null
	,aggregator: null
	,newline: null
	,indent: null
	,setHandler: function(handler) {
		this.handler = handler;
	}
	,startTime: null
	,start: function(e) {
		this.startTime = this.getTime();
	}
	,getTime: function() {
		var hrtime = process.hrtime();
		return hrtime[0] + hrtime[1] / 1e9;
	}
	,indents: function(c) {
		var s = "";
		while(--c >= 0) s += this.indent;
		return s;
	}
	,dumpStack: function(stack) {
		if(stack.length == 0) {
			return "";
		}
		var parts = haxe_CallStack.toString(stack).split("\n");
		var r = [];
		var _g = 0;
		while(_g < parts.length) {
			var part = parts[_g];
			++_g;
			if(part.indexOf(" utest.") >= 0) {
				continue;
			}
			r.push(part);
		}
		return r.join(this.newline);
	}
	,addHeader: function(buf,result) {
		if(!utest_ui_common_ReportTools.hasHeader(this,result.stats)) {
			return;
		}
		var end = this.getTime();
		var time = ((end - this.startTime) * 1000 | 0) / 1000;
		buf.b += Std.string("\nassertations: " + result.stats.assertations + this.newline);
		buf.b += Std.string("successes: " + result.stats.successes + this.newline);
		buf.b += Std.string("errors: " + result.stats.errors + this.newline);
		buf.b += Std.string("failures: " + result.stats.failures + this.newline);
		buf.b += Std.string("warnings: " + result.stats.warnings + this.newline);
		buf.b += Std.string("execution time: " + time + this.newline);
		buf.b += Std.string(this.newline);
		buf.b += Std.string("results: " + (result.stats.isOk ? "ALL TESTS OK (success: true)" : "SOME TESTS FAILURES (success: false)"));
		buf.b += Std.string(this.newline);
	}
	,result: null
	,getResults: function() {
		var buf = new StringBuf();
		this.addHeader(buf,this.result);
		var _g = 0;
		var _g1 = this.result.packageNames();
		while(_g < _g1.length) {
			var pname = _g1[_g];
			++_g;
			var pack = this.result.getPackage(pname);
			if(utest_ui_common_ReportTools.skipResult(this,pack.stats,this.result.stats.isOk)) {
				continue;
			}
			var _g2 = 0;
			var _g3 = pack.classNames();
			while(_g2 < _g3.length) {
				var cname = _g3[_g2];
				++_g2;
				var cls = pack.getClass(cname);
				if(utest_ui_common_ReportTools.skipResult(this,cls.stats,this.result.stats.isOk)) {
					continue;
				}
				buf.b += Std.string((pname == "" ? "" : pname + ".") + cname + this.newline);
				var _g4 = 0;
				var _g5 = cls.methodNames();
				while(_g4 < _g5.length) {
					var mname = _g5[_g4];
					++_g4;
					var fix = cls.get(mname);
					if(utest_ui_common_ReportTools.skipResult(this,fix.stats,this.result.stats.isOk)) {
						continue;
					}
					var x = this.indents(1) + mname + ": ";
					buf.b += Std.string(x);
					if(fix.stats.isOk) {
						buf.b += "OK ";
					} else if(fix.stats.hasErrors) {
						buf.b += "ERROR ";
					} else if(fix.stats.hasFailures) {
						buf.b += "FAILURE ";
					} else if(fix.stats.hasWarnings) {
						buf.b += "WARNING ";
					}
					var messages = "";
					var _g6 = fix.iterator();
					while(_g6.head != null) {
						var val = _g6.head.item;
						_g6.head = _g6.head.next;
						switch(val._hx_index) {
						case 0:
							buf.b += ".";
							break;
						case 1:
							buf.b += "F";
							messages += this.indents(2) + "line: " + val.pos.lineNumber + ", " + val.msg + this.newline;
							break;
						case 2:
							var _ge = val.e;
							buf.b += "E";
							messages += this.indents(2) + (_ge == null ? "null" : Std.string(_ge)) + this.dumpStack(val.stack) + this.newline;
							break;
						case 3:
							var _ge1 = val.e;
							buf.b += "S";
							messages += this.indents(2) + (_ge1 == null ? "null" : Std.string(_ge1)) + this.dumpStack(val.stack) + this.newline;
							break;
						case 4:
							var _ge2 = val.e;
							buf.b += "T";
							messages += this.indents(2) + (_ge2 == null ? "null" : Std.string(_ge2)) + this.dumpStack(val.stack) + this.newline;
							break;
						case 5:
							buf.b += "O";
							messages += this.indents(2) + "missed async calls: " + val.missedAsyncs + this.dumpStack(val.stack) + this.newline;
							break;
						case 6:
							var _ge3 = val.e;
							buf.b += "A";
							messages += this.indents(2) + (_ge3 == null ? "null" : Std.string(_ge3)) + this.dumpStack(val.stack) + this.newline;
							break;
						case 7:
							buf.b += "W";
							messages += this.indents(2) + val.msg + this.newline;
							break;
						case 8:
							var _greason = val.reason;
							buf.b += "I";
							if(_greason != null && _greason != "") {
								messages += this.indents(2) + ("With reason: " + _greason) + this.newline;
							}
							break;
						}
					}
					buf.b = (buf.b += Std.string(this.newline)) + (messages == null ? "null" : "" + messages);
				}
			}
		}
		return buf.b;
	}
	,complete: function(result) {
		this.result = result;
		if(this.handler != null) {
			this.handler(this);
		}
		var exitCode = result.stats.isOk ? 0 : 1;
		if(typeof phantom != "undefined") {
			phantom.exit(exitCode);
		}
		if(typeof process != "undefined") {
			process.exit(exitCode);
		}
	}
	,__class__: utest_ui_text_PlainTextReport
};
var utest_ui_text_PrintReport = function(runner) {
	utest_ui_text_PlainTextReport.call(this,runner,$bind(this,this._handler));
	this.newline = "\n";
	this.indent = "  ";
};
utest_ui_text_PrintReport.__name__ = "utest.ui.text.PrintReport";
utest_ui_text_PrintReport.__super__ = utest_ui_text_PlainTextReport;
utest_ui_text_PrintReport.prototype = $extend(utest_ui_text_PlainTextReport.prototype,{
	_handler: function(report) {
		this._trace(report.getResults());
	}
	,_trace: function(s) {
		s = StringTools.replace(s,"  ",this.indent);
		s = StringTools.replace(s,"\n",this.newline);
		haxe_Log.trace(s,{ fileName : "utest/ui/text/PrintReport.hx", lineNumber : 52, className : "utest.ui.text.PrintReport", methodName : "_trace"});
	}
	,__class__: utest_ui_text_PrintReport
});
var utest_utils_AccessoriesUtils = function() { };
utest_utils_AccessoriesUtils.__name__ = "utest.utils.AccessoriesUtils";
utest_utils_AccessoriesUtils.getSetupClass = function(accessories) {
	if(accessories.setupClass == null) {
		return utest_Async.getResolved;
	} else {
		return accessories.setupClass;
	}
};
utest_utils_AccessoriesUtils.getSetup = function(accessories) {
	if(accessories.setup == null) {
		return utest_Async.getResolved;
	} else {
		return accessories.setup;
	}
};
utest_utils_AccessoriesUtils.getTeardown = function(accessories) {
	if(accessories.teardown == null) {
		return utest_Async.getResolved;
	} else {
		return accessories.teardown;
	}
};
utest_utils_AccessoriesUtils.getTeardownClass = function(accessories) {
	if(accessories.teardownClass == null) {
		return utest_Async.getResolved;
	} else {
		return accessories.teardownClass;
	}
};
var utest_utils_AsyncUtils = function() { };
utest_utils_AsyncUtils.__name__ = "utest.utils.AsyncUtils";
utest_utils_AsyncUtils.orResolved = function(_async) {
	if(_async == null) {
		return utest_Async.getResolved();
	} else {
		return _async;
	}
};
var utest_utils_Print = function() { };
utest_utils_Print.__name__ = "utest.utils.Print";
utest_utils_Print.immediately = function(msg) {
	console.log(msg);
};
utest_utils_Print.startCase = function(caseName) {
};
utest_utils_Print.startTest = function(name) {
};
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
Object.defineProperty(String.prototype,"__class__",{ value : String, enumerable : false, writable : true});
String.__name__ = "String";
Array.__name__ = "Array";
Date.prototype.__class__ = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
js_Boot.__toStr = ({ }).toString;
Main.nextNumber = 0;
Main.accumulated = 0;
coro_Primitive.suspended = new coro_Primitive();
coro_Primitive.undecided = new coro_Primitive();
coro_Primitive.resumed = new coro_Primitive();
utest_AccessoryName.SETUP_NAME = "setup";
utest_AccessoryName.SETUP_CLASS_NAME = "setupClass";
utest_AccessoryName.TEARDOWN_NAME = "teardown";
utest_AccessoryName.TEARDOWN_CLASS_NAME = "teardownClass";
utest_TestHandler.POLLING_TIME = 10;
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=main.js.map