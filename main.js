// Generated by Haxe 5.0.0-alpha.1+ddc0c61
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Main = function() { };
Main.__name__ = "Main";
Main.getNumber = function(cb) {
	cb(++Main.nextNumber);
};
Main.getNumberPromise = function() {
	return new Promise(function(resolve,_) {
		Main.getNumber(resolve);
	});
};
Main.someAsync = function(__continuation) {
	var __state = 0;
	var tmp0;
	var promise;
	var tmp1;
	var __stateMachine = null;
	__stateMachine = function(__result) {
		while(true) switch(__state) {
		case 0:
			console.log("src/Main.hx:23:","hi");
			__state = 1;
			break;
		case 1:
			__state = 2;
			Main.getNumber(__stateMachine);
			return;
		case 2:
			tmp0 = __result;
			if(tmp0 < 10) {
				__state = 3;
			} else {
				__state = 5;
			}
			break;
		case 3:
			console.log("src/Main.hx:25:","wait for it...");
			promise = Main.getNumberPromise();
			__state = 4;
			promise.then(__stateMachine);
			return;
		case 4:
			tmp1 = __result;
			console.log("src/Main.hx:28:",tmp1);
			__state = 1;
			break;
		case 5:
			console.log("src/Main.hx:30:","bye");
			__state = -1;
			__continuation(15);
			return;
		default:
			throw haxe_Exception.thrown("Invalid state");
		}
	};
	return __stateMachine;
};
Main.fibonacci = function($yield,__continuation) {
	var __state = 0;
	var tmp0;
	var cur;
	var next;
	var tmp1;
	var tmp;
	var __stateMachine = null;
	__stateMachine = function(__result) {
		while(true) switch(__state) {
		case 0:
			__state = 1;
			$yield(1,__stateMachine);
			return;
		case 1:
			tmp0 = __result;
			cur = 1;
			next = 1;
			__state = 2;
			break;
		case 2:
			__state = 3;
			break;
		case 3:
			__state = 4;
			$yield(next,__stateMachine);
			return;
		case 4:
			tmp1 = __result;
			tmp = cur + next;
			cur = next;
			next = tmp;
			__state = 2;
			break;
		case 5:
			__state = -1;
			__continuation(null);
			return;
		default:
			throw haxe_Exception.thrown("Invalid state");
		}
	};
	return __stateMachine;
};
Main.main = function() {
	(Main.someAsync(function(result) {
		console.log("src/Main.hx:47:","Result: " + result);
	}))(null);
	var v = new Gen(Main.fibonacci);
	while(v.hasNext()) {
		var v1 = v.next();
		console.log("src/Main.hx:51:",v1);
		if(v1 > 10000) {
			break;
		}
	}
};
var GenState = $hxEnums["GenState"] = { __ename__:true,__constructs__:null
	,NotReady: {_hx_name:"NotReady",_hx_index:0,__enum__:"GenState",toString:$estr}
	,Ready: {_hx_name:"Ready",_hx_index:1,__enum__:"GenState",toString:$estr}
	,Done: {_hx_name:"Done",_hx_index:2,__enum__:"GenState",toString:$estr}
	,Failed: {_hx_name:"Failed",_hx_index:3,__enum__:"GenState",toString:$estr}
};
GenState.__constructs__ = [GenState.NotReady,GenState.Ready,GenState.Done,GenState.Failed];
var Gen = function(cont) {
	this.nextStep = cont($bind(this,this.yield),$bind(this,this.done));
	this.state = GenState.NotReady;
};
Gen.__name__ = "Gen";
Gen.prototype = {
	'yield': function(value,next) {
		this.nextValue = value;
		this.state = GenState.Ready;
	}
	,done: function(result) {
		this.state = GenState.Done;
	}
	,hasNext: function() {
		switch(this.state._hx_index) {
		case 1:
			return true;
		case 2:
			return false;
		default:
			this.state = GenState.Failed;
			this.nextStep(null);
			return this.state == GenState.Ready;
		}
	}
	,next: function() {
		if(!this.hasNext()) {
			throw haxe_Exception.thrown("no more");
		}
		this.state = GenState.NotReady;
		return this.nextValue;
	}
};
Math.__name__ = "Math";
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	get_native: function() {
		return this.__nativeException;
	}
});
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
});
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var js_Boot = function() { };
js_Boot.__name__ = "js.Boot";
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(o.__params__) {
				s = s + "\t";
				var params = o.__params__();
				var _g = 0;
				var _g1 = params.length;
				while(true) {
					if(!(_g < _g1)) {
						break;
					}
					var i = (function($this) {
						var $r;
						_g = _g + 1;
						$r = _g - 1;
						return $r;
					}(this));
					params[i] = js_Boot.__string_rec(params[i],s);
				}
				return (n == null ? "null" : "" + n) + "(" + params.join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
String.__name__ = "String";
Array.__name__ = "Array";
js_Boot.__toStr = ({ }).toString;
Main.nextNumber = 0;
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
