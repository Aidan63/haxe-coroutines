// Generated by Haxe 4.0.0 (git build development @ 7429981)
(function () { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Main = function() { };
Main.__name__ = true;
Main.getNumber = function(cb) {
	cb(++Main.nextNumber);
};
Main.getNumberPromise = function() {
	return new Promise(function(resolve,_) {
		Main.getNumber(resolve);
		return;
	});
};
Main.main = function() {
	((function(n,__continuation) {
		var __state = 0;
		var tmp0;
		var promise;
		var tmp1;
		var __stateMachine = null;
		__stateMachine = function(__result) {
			while(true) switch(__state) {
			case 0:
				console.log("Main.hx:26:","hi");
				__state = 1;
				break;
			case 1:
				__state = 2;
				Main.getNumber(__stateMachine);
				return;
			case 2:
				tmp0 = __result;
				if(tmp0 < 10) {
					__state = 3;
				} else {
					__state = 5;
				}
				break;
			case 3:
				console.log("Main.hx:29:","wait for it...");
				promise = Main.getNumberPromise();
				__state = 4;
				promise.then(__stateMachine);
				return;
			case 4:
				tmp1 = __result;
				console.log("Main.hx:32:",tmp1);
				__state = 1;
				break;
			case 5:
				console.log("Main.hx:35:","bye");
				__state = -1;
				__continuation(15);
				return;
			default:
				throw new js__$Boot_HaxeError("Invalid state");
			}
		};
		return __stateMachine;
	})(10,function(value) {
		console.log("Main.hx:40:","Result: " + value);
		return;
	}))(null);
	var gen = new Gen(function($yield,__continuation1) {
		var __state1 = 0;
		var tmp01;
		var tmp11;
		var tmp2;
		var __stateMachine1 = null;
		__stateMachine1 = function(__result1) {
			while(true) switch(__state1) {
			case 0:
				__state1 = 1;
				$yield(1,__stateMachine1);
				return;
			case 1:
				tmp01 = __result1;
				__state1 = 2;
				$yield(2,__stateMachine1);
				return;
			case 2:
				tmp11 = __result1;
				__state1 = 3;
				$yield(3,__stateMachine1);
				return;
			case 3:
				tmp2 = __result1;
				__state1 = -1;
				__continuation1(null);
				return;
			default:
				throw new js__$Boot_HaxeError("Invalid state");
			}
		};
		return __stateMachine1;
	});
	while(gen.hasNext()) console.log("Main.hx:52:",gen.next());
};
var GenState = { __ename__ : true, __constructs__ : ["NotReady","Ready","Done","Failed"] };
GenState.NotReady = ["NotReady",0];
GenState.NotReady.toString = $estr;
GenState.NotReady.__enum__ = GenState;
GenState.Ready = ["Ready",1];
GenState.Ready.toString = $estr;
GenState.Ready.__enum__ = GenState;
GenState.Done = ["Done",2];
GenState.Done.toString = $estr;
GenState.Done.__enum__ = GenState;
GenState.Failed = ["Failed",3];
GenState.Failed.toString = $estr;
GenState.Failed.__enum__ = GenState;
var Gen = function(cont) {
	this.nextStep = cont($bind(this,this["yield"]),$bind(this,this.done));
	this.state = GenState.NotReady;
};
Gen.__name__ = true;
Gen.prototype = {
	'yield': function(value,next) {
		this.nextValue = value;
		this.state = GenState.Ready;
	}
	,done: function(result) {
		this.state = GenState.Done;
	}
	,hasNext: function() {
		switch(this.state[1]) {
		case 1:
			return true;
		case 2:
			return false;
		default:
			this.state = GenState.Failed;
			this.nextStep(null);
			return this.state == GenState.Ready;
		}
	}
	,next: function() {
		if(!this.hasNext()) {
			throw new js__$Boot_HaxeError("no more");
		}
		this.state = GenState.NotReady;
		return this.nextValue;
	}
};
Math.__name__ = true;
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.__name__ = true;
Array.__name__ = true;
Date.__name__ = ["Date"];
Main.nextNumber = 0;
Main.main();
})();
